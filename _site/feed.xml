<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-11-01T17:31:08+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Jinsu’s story</title><subtitle>매일 정리하는 습관</subtitle><author><name>Moon JinSu</name></author><entry><title type="html">[테스트] 단위 테스트</title><link href="http://localhost:4000/%ED%85%8C%EC%8A%A4%ED%8A%B8/43/" rel="alternate" type="text/html" title="[테스트] 단위 테스트" /><published>2023-11-01T00:00:00+09:00</published><updated>2023-11-01T00:00:00+09:00</updated><id>http://localhost:4000/%ED%85%8C%EC%8A%A4%ED%8A%B8/43</id><content type="html" xml:base="http://localhost:4000/%ED%85%8C%EC%8A%A4%ED%8A%B8/43/">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;동기&quot;&gt;동기&lt;/h2&gt;

&lt;p&gt;이번 우테코 2주차 미션부터 메서드를 테스트하는 요구사항이 추가됐다. &lt;br /&gt;
그래서 이번에 테스트에 대해서 공부하고 정리하고자 이 글을 작성하게 됐다. &lt;br /&gt;
테스트에는 크게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;단위 테스트&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;통합 테스트&lt;/code&gt;가 있는데 오늘은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;단위 테스트&lt;/code&gt;가 무엇인지, 그리고 어떻게 사용하는지에 중점을 맞추겠다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;단위-테스트&quot;&gt;단위 테스트&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;단위 테스트는 응용 프로그램에서 테스트 가능한 가장 작은 소프트웨어를 실행하여 예상대로 동작하는지 확인하는 테스트이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;가장 작은 단위의 테스트로 일반적으로 클래스 또는 메서드 수준으로 테스트를 진행한다. Java에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JUnit&lt;/code&gt;을 통해 테스트가 진행되며, 특히 &lt;em&gt;TDD&lt;/em&gt;와 함께 할 때 강력함을 발휘한다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그러면 바로 사용 방법에 대해서 알아보자. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;사용되는-에노테이션&quot;&gt;사용되는 에노테이션&lt;/h2&gt;

&lt;h3 id=&quot;test&quot;&gt;@Test&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Test&lt;/code&gt;를 붙이면 메서드를 테스트 메서드로 인식하게 되고, 단일 실행할 수 있게 설정된다.&lt;br /&gt;
아래 코드를 보자 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43_1.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;메소드를 단독으로 실행할 수 있게 왼쪽에 녹색 커서가 생긴것을 확인할 수 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;실행 결과&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43_2.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 단독으로 테스트 메서드가 실행된 것을 확인할 수 있다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;displayname&quot;&gt;@DisplayName&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@DisplayName&lt;/code&gt;는 테스트 결과에 뜨는 이름을 설정할 수 있게 해준다. 테스트 결과에 같이 출력하고 싶은 내용을 추가할 수 있게 해준다. &lt;br /&gt;
바로 예시를 보자 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43_3.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 해주면 아래와 같이 결과와 함께 미시지를 출력할 수 있다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43_4.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;before-시리즈&quot;&gt;@Before~ 시리즈&lt;/h3&gt;

&lt;h2 id=&quot;beforeall&quot;&gt;BeforeAll&lt;/h2&gt;

&lt;p&gt;이름부터 참 직관적이다. 모든 테스트 실행되기 전에 실행되는 것이라고 생각하면 된다.&lt;br /&gt;
&lt;strong&gt;단 한번만 실행되면 반드시 static으로 선언해야 한다.&lt;/strong&gt; &lt;br /&gt;
바로 예시를 보자 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43_5.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43_6.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;결과를 보면 알 수 있듯이 먼저 실행이 출력되고 test1, test2의 내용이 출력되는 것을 확인할 수 있다. 이 때 주의할 점은 test1, test2의 순서는 보장되지 않는다. 내부적으로 실행 순서가 있긴 하지만 이는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JUnit&lt;/code&gt;의 내부 구조에 따라 바뀔 수 있다.&lt;br /&gt;
만약 순서를 지정하고 싶다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@TestMethodOrder&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Order&lt;/code&gt;를 사용해서 지정할 수 있다. &lt;br /&gt;
&lt;strong&gt;일반적으로 단위 테스트는 서로 의존적이지 않기 때문에 순서가 상관이 없다.&lt;/strong&gt; 하지만 경우에 따라 순서가 필요한 경우가 있을 수 있기 때문에 알아만 두자! &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;beforeeach&quot;&gt;@BeforeEach&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@BeforeEach&lt;/code&gt;는 각각의 테스트 메서드가 실행되기 전에 실행되는 메서드다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@BeforeAll&lt;/code&gt;은 처음에 한 번 실행되지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@BeforeEach&lt;/code&gt;는 각 테스트마다 실행되는 차이점이 있다. &lt;br /&gt;
마찬가지로 예시를 보자 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43_7.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43_8.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;결과를 보면 알 수 있듯이 먼저 실행이 test1, test2 실행 이전에 출력되는 것을 확인할 수 있다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;after-시리즈&quot;&gt;@After~ 시리즈&lt;/h2&gt;

&lt;h3 id=&quot;afterall&quot;&gt;@AfterAll&lt;/h3&gt;

&lt;p&gt;모든 테스트 메서드가 실행되고 단 한번만 실행된다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@BeforeAll&lt;/code&gt;과 정 반대라고 생각하면 된다.&lt;br /&gt;
마찬가지로 static 메서드로 선언해야 한다.&lt;br /&gt;
예시를 보자 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43_9.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43_10.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;나중 실행&lt;/strong&gt;이 모든 테스트 메서드가 실행되고 난 후 출력된 것을 확인할 수 있다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;aftereach&quot;&gt;@AfterEach&lt;/h3&gt;

&lt;p&gt;위에 설명한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@BeforeEach&lt;/code&gt;의 정 반대라고 생각하면 된다. 테스트 메서드가 끝날때마다 호출된다. &lt;br /&gt;
마찬가지로 예시를 보자 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43_11.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43_12.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이제 실제로 단위 테스트에 사용되는 메서드들을 살펴보자. &lt;br /&gt;
일반적으로 단정(assert) 메서드를 많이 사용하는데 크게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;junit&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertj&lt;/code&gt; 두 종류가 있다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertj&lt;/code&gt;가 등장하기 전까지는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;junit&lt;/code&gt;을 주로 사용했지만 이제는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertj&lt;/code&gt;를 많이 사용한다. 기능은 동일하지만 가독성이 더 좋기 때문이다. &lt;br /&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertj&lt;/code&gt;는 메서드 체인을 지원하기 때문에 가독성이 더 좋다. &lt;br /&gt; 때문에 오늘은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertj&lt;/code&gt;에 대해서 정리하고자 한다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;assertj&quot;&gt;assertj&lt;/h1&gt;

&lt;h2 id=&quot;assertionsassertthat&quot;&gt;Assertions.assertThat()&lt;/h2&gt;

&lt;h3 id=&quot;isequalto-isnotequalto&quot;&gt;isEqualTo(), isNotEqualTo()&lt;/h3&gt;

&lt;p&gt;이 메서드는 &lt;strong&gt;assertThat(a).isEqualTo(b)&lt;/strong&gt;와 같이 사용된다. 대상a 와 기댓값 b의 값이 같은지 확인하는 메서드이다. &lt;br /&gt;
isNotEqualTo()는 정확히 반대라고 생각하면 된다.&lt;br /&gt;
예시를 보자&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43_13.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;isEqualTo(), isNotEqualTo()는 값을 통해 검증하는 단정 메서드이다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;issameas-isnotsameas&quot;&gt;isSameAs(), isNotSameAs()&lt;/h3&gt;

&lt;p&gt;이 메서드는 &lt;strong&gt;assertThat(a).isSameAs(b)&lt;/strong&gt; 와 같이 사용된다. 대상 a가 기댓값 b와 같은 대상인지 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;주소값&lt;/code&gt;을 통해 확인한다. &lt;br /&gt;
사용법은 사실 isEqualTo()와 완전히 동일하기 때문에 생략하겠다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;여기서 가장 중요한 부분은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isEqualTo()&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isSameAs()&lt;/code&gt;의 차이점을 명확하게 아는 것이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;isequalto-vs-issameas&quot;&gt;isEqualTo() VS isSameAs()&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;isEqualTo()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;isEqualTo()는 단순히 값이 동일한지 확인한다. 객체가 비교 대상이 될 때는 Java의 equals() 메서드의 기능을 한다. &lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;isSameAs()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;isSameAs()는 단순 값이 아니라 참조값이 같은지를 비교한다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;아래 코드를 보고 어떤 결과가 나올지 생각해보면 더 잘 이해할 수 있을 것이다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43_14.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;case 1, 2, 3, 4의 결과를 생각해보자. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case1&lt;/code&gt; 의 경우는 에러가 발생할 것이다. memberA, memberB는 다른 객체를 가리키고 있기 때문이다. &lt;br /&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case2&lt;/code&gt; 의 경우는 어떨까? 마찬가지로 에러가 발생할 것이다. 이름도 같고 id도 같은데 왜 에러가 발생할까? 그 이유는앞에서 말한 것처럼 isEqualTo()는 Java문법의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;equals()&lt;/code&gt;와 동일한 기능을 제공하기 때문이다. 우리는 Member를 정의할 때, Object 클래스의 equals()메서드를 오버라이딩하지 않았기 때문에 단순 객체의 참조값을 비교하게 된다. 때문에 에러가 발생하는 것이다. &lt;br /&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case3&lt;/code&gt; 의 경우는 성공할 것이다. 맴버변수 name은 String 타입이다. String은 equals() 함수를 오버라이딩 해서 실제 값을 비교하도록 구현돼있다. memberA, memberB는 동일한 member라는 이름을 가지기 때문에 성공한다. &lt;br /&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case4&lt;/code&gt; 의 경우도 String 타입이기 때문에 실제 값을 비교하여 성공하게 될 것이다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;isinstanceof&quot;&gt;isInstanceOf()&lt;/h2&gt;

&lt;p&gt;이 메서드는 대상이 특정 클래스의 인스턴스인지 검증할 때 사용한다. 사용법은 &lt;strong&gt;assertThat(a).isInstanceOf(b.class)&lt;/strong&gt;와 같이 사용하면 된다. &lt;br /&gt; 아래 예시 코드를 보자 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43_15.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;isnull-isnotnull&quot;&gt;isNull(), isNotNull()&lt;/h2&gt;

&lt;p&gt;이름 그대로 대상이 null인지 아닌지 확인하는 메서드이다. &lt;br /&gt;
바로 예시를 보자 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43_16.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;contains-containsexactly&quot;&gt;contains(), containsExactly()&lt;/h2&gt;

&lt;p&gt;contains()는 리스트에 특정 원소가 포함됐는지 확인할 때 사용한다. 순서를 따지지 않고 값만 존재한다면 통과한다. &lt;br /&gt;
사용방법은 &lt;strong&gt;Assertions.assertThat(list).contains(1, 2)&lt;/strong&gt;와 같다. &lt;br /&gt;&lt;br /&gt;
containsExactly()는 contains()와 달리 원소의 순서, 개수까지 정확하게 동일해야 통과를 한다. &lt;br /&gt;
아래 코드를 보고 어떤 결과가 나올지 생각해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/43_17.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case1&lt;/code&gt;의 경우는 실패할 것이다. containsExactly()는 정확하게 값이 일치하고 순서도 같아야 하기 때문이다. &lt;br /&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case2&lt;/code&gt;는 성공할 것이다. 순서와 값이 일치한다. &lt;br /&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case3&lt;/code&gt;은 성공할 것이다. contains는 값의 일부만 일치해도 통과가 된다. 그리고 순서도 신경쓰지 않기 때문이다. &lt;br /&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case4&lt;/code&gt;는 실패할 것이다. 값은 모두 일치하지만 순서가 다르기 때문이다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;오늘은 기본적인 단위 테스트에 대해서 정리해봤다. 혹시 잘못된 부분이 있다면 알려주세요~ &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고-사이트&quot;&gt;참고 사이트&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://m42-orion.tistory.com/97?category=1085496&lt;/li&gt;
  &lt;li&gt;https://tecoble.techcourse.co.kr/post/2021-05-25-unit-test-vs-integration-test-vs-acceptance-test/&lt;/li&gt;
  &lt;li&gt;https://velog.io/@chori/JUnit-5-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4&lt;/li&gt;
  &lt;li&gt;https://inkyu-yoon.github.io/docs/Language/Spring/IsEqualIsSame&lt;/li&gt;
  &lt;li&gt;https://bcp0109.tistory.com/317&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Moon JinSu</name></author><category term="테스트" /><category term="우테코" /><category term="프리코스" /><category term="테스트" /><category term="Junit5" /><summary type="html"></summary></entry><entry><title type="html">[프리코스] 숫자 야구 리뷰</title><link href="http://localhost:4000/%EC%9A%B0%ED%85%8C%EC%BD%94/42/" rel="alternate" type="text/html" title="[프리코스] 숫자 야구 리뷰" /><published>2023-10-30T00:00:00+09:00</published><updated>2023-10-30T00:00:00+09:00</updated><id>http://localhost:4000/%EC%9A%B0%ED%85%8C%EC%BD%94/42</id><content type="html" xml:base="http://localhost:4000/%EC%9A%B0%ED%85%8C%EC%BD%94/42/">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/42_2.png&quot; alt=&quot;img1&quot; width=&quot;40%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;조금 늦었지만 지난주에 수행했던 숫자 야구 미션에 대해서 리뷰해보고자 한다. &lt;br /&gt;
숫자 야구 게임이란 1~9까지의 서로 다른 수로 이루어진 3자리의 수를 맞추는 게임이다. 컴퓨터가 생성한 3자리 숫자와 사용자가 입력한 3자리 수의 각 자리수를 비교한다. 만약 자리수, 숫자가 모두 같으면 스트라이크이고 자리수는 다르지만 숫자가 같으면 볼이다. 자리수, 숫자 같은게 아무것도 없으면 낫싱이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이를 토대로 다음과 같은 기능 명세서를 먼저 만들었다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;기능-명세서&quot;&gt;기능 명세서&lt;/h2&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;컴퓨터 난수 생성하기
    &lt;ul class=&quot;task-list&quot;&gt;
      &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;수의 유효성을 검사한다. (길이가 3인지, 숫자인지, 중복된 수인지)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;사용자로부터 숫자를 입력 받기
    &lt;ul class=&quot;task-list&quot;&gt;
      &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;입력 숫자의 유효성을 검사한다. (null검사, 길이 3인지, 숫자인지, 중복된 수 존재하는지)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;컴퓨터 수와 사용자로부터 입력받은 수를 비교한다.
    &lt;ul class=&quot;task-list&quot;&gt;
      &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;볼 개수 세기&lt;/li&gt;
      &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;스트라이크 개수 세기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;게임 성공 여부를 판단한다.
    &lt;ul class=&quot;task-list&quot;&gt;
      &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;스트라이크의 수가 3인지 체크한다.&lt;/li&gt;
      &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;성공 시 게임 재시작 숫자를 입력한다.&lt;/li&gt;
      &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;실패 시 게임 숫자를 입력한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;결과 출력
    &lt;ul class=&quot;task-list&quot;&gt;
      &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;성공시 성공 메시지와 재시작 안내 메시지를 출력한다.&lt;/li&gt;
      &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;실패시 게임 결과를 출력하고 게임 숫자 입력 안내 메시지를 출력한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;종료 숫자를 입력받는다.
    &lt;ul class=&quot;task-list&quot;&gt;
      &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;종료 입력 수의 유효성을 검사한다. (null검사, 길이 1인지, (1, 2)에 속하는지)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이제 이를 토대로 구현한 코드를 살펴볼건데 먼저 리팩토링하기 전의 단순히 테스트만 통과하는 코드를 먼저 보자 &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;리팩토링-전-코드&quot;&gt;리팩토링 전 코드&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;숫자 야구 게임을 시작합니다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;computer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Randoms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pickNumberInRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randomNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;computer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randomNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
                    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;숫자를 입력해주세요 : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

                    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;1&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;9&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strike&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;0&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;strike&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strike&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3스트라이크&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;개의 숫자를 모두 맞히셨습니다! 게임 종료&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;게임을 새로 시작하려면 1, 종료하려면 2를 입력하세요.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strike&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;낫싱&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;볼&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strike&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;스트라이크&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;볼 &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strike&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;스트라이크&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isExit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isExit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isExit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;1&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isExit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;2&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isExit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;0&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
진짜 말그대로 테스트만 통과하게 작성한 코드이다. 코테 문제푸는 느낌? 으로 구현했던 것 같다..&lt;br /&gt;
하지만 단순히 p/f로 나뉘는 코테와 달리 실제로 다른 사람과 협업하고 유지보수적인 관점까지 고려한다면, 위 코드에는 다음과 같이 여러 문제가 있다. &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제점&quot;&gt;문제점&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;하나의 클래스에서 모든 작업이 이루어진다. -&amp;gt; 너무 많은 책임의 부여&lt;/li&gt;
  &lt;li&gt;가독성이 매우 떨어진다. -&amp;gt; 코드만 보고 어떤 일을 하고 있는지 파악이 어렵다.&lt;/li&gt;
  &lt;li&gt;하드코딩 했기 때문에 유지보수가 어렵다.&lt;/li&gt;
  &lt;li&gt;하나의 메서드에서 모든 일이 수행되기 때문에 단위 테스트가 불가능하다.&lt;/li&gt;
  &lt;li&gt;에러 메시지가 없기 때문에 정확히 어디서 예외가 발생한지 확인하기 어렵다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;문제해결&quot;&gt;문제해결&lt;/h2&gt;

&lt;p&gt;이런 문제를 해결하기 위해서 필자는 우선 메서드를 나눠보기로 했다. &lt;br /&gt;
위 코드를 토대로 메서드를 추출하려고 노력했는데 스파게티 코드라서 나누는 기준을 잡는것이 쉽지 않았다..&lt;br /&gt;
(주말에 숫자 야구 피드백 강의영상을 보고 반성을 많이했다. 기능 명세서의 중요성과 설계의 중요성을 다시금 느꼈다…) &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;필자는 결과를 출력하는 부분, 게임 숫자를 입력받는 부분, 숫자를 검증하는 부분, 종료 숫자를 입력받는 부분, 난수 생성 부분, 게임 실행 부분을 추출하였다.&lt;br /&gt;
그리고나서 각각의 메서드 기능을 테스트하기 위해서 테스트 코드를 작성하고자 했다. 그런데 여기서 문제가 발생했다. &lt;br /&gt;
private 메서드를 test할 수 없었다.. 그래서 어떻게 하면 테스트 할 수 있을지 찾아봤다. 그리고 private 메서드는 강제로 테스트할 수는 있지만 &lt;strong&gt;private 메서드의 기능이 테스트가 필요한 기능이면 클래스 분리를 생각해봐야 한다는 답을 얻었다.&lt;/strong&gt; &lt;br /&gt;&lt;br /&gt;
그래서 필자는 앞서 분리한 메서드들이 테스트가 필요한지, 어떤 기준으로 나누면 더 코드가 명확해지는지 고민했다. 그리고 필요한 부분에 대해서 클래스 승격을 진행했다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;승격된-클래스들&quot;&gt;승격된 클래스들&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/42_1.png&quot; alt=&quot;img1&quot; width=&quot;40%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;우테코-커뮤니티&quot;&gt;우테코 커뮤니티&lt;/h2&gt;

&lt;p&gt;그리고 이 과정에서 우테코 커뮤니티의 글들이 도움이 많이 됐다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;함께 나누기&lt;/code&gt;에 여러 유익한 글들이 많이 올라왔는데 이중에 &lt;strong&gt;일급 컬렉션&lt;/strong&gt;이라는 주제가 올라왔었다. 처음 보는 키워드였기 때문에 바로 공부를 해서 블로그에 정리하였다 .&lt;br /&gt; 
&lt;br /&gt; 일급 컬렉션 정리 : https://jinsu868.github.io/%ED%81%B4%EB%A6%B0%EC%BD%94%EB%93%9C/40/ &lt;br /&gt;&lt;br /&gt;
그리고 공부를 해보니 일급 컬렉션이 딱 난수 생성 클래스에 적용하면 좋겠다는 생각이 들었다. 그래서 다시 코드를 리팩토링하여 적용시켰다. &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;computernumber-class-일급-컬렉션&quot;&gt;ComputerNumber class (일급 컬렉션)&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComputerNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ComputerNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;createComputerNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createComputerNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Randoms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pickNumberInRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randomNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randomNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;매직넘버---상수&quot;&gt;매직넘버 -&amp;gt; 상수&lt;/h2&gt;

&lt;p&gt;그리고 나서 가독성 및 유지보수를 위해 매직넘버를 상수로 빼고, ENUM을 사용하여 리팩토링을 진행했다. 메서드 이름, 변수 명도 역할을 명확하게 표현하기 위해 수정했다. &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//상수 사용&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Notification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;STRIKE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;스트라이크&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BALL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;볼&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NOTHING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;낫싱&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;END_MESSAGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;3스트라이크\n3개의 숫자를 모두 맞히셨습니다! 게임 종료&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RESTART_MESSAGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;게임을 새로 시작하려면 1, 종료하려면 2를 입력하세요.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;START_MESSAGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;숫자 야구 게임을 시작합니다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;notifySuccessResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;END_MESSAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RESTART_MESSAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;enum-사용&quot;&gt;ENUM 사용&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//ENUM 사용&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ErrorCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;INVALID_PLAY_NUMBER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;유효하지 않은 게임 수를 입력하였습니다.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;INVALID_TERMINATE_NUMBER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;유요하지 않은 종료 수를 입력하였습니다&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ErrorCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getErrorMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번 미션에서는 기능 명세서를 제대로 활용하지 못한 것 같다. 다음 미션부터는 기능 명세서를 확실하게 먼저 작성하고 설계를 제대로 한 다음에 코드를 작성하도록 노력하겠다:)&lt;/p&gt;

&lt;p&gt;전체 코드는 아래 링크에서 확인할 수 있다. &lt;br /&gt;
https://github.com/woowacourse-precourse/java-baseball-6/pull/408/files#diff-c71c95b782b88469a2947a817aa6945baf76f4e52c732f226e056fbfae0dcd52&lt;/p&gt;</content><author><name>Moon JinSu</name></author><category term="우테코" /><category term="우테코" /><category term="프리코스" /><summary type="html"></summary></entry><entry><title type="html">[git] Merge, Rebase, Cheery-pick</title><link href="http://localhost:4000/git/41/" rel="alternate" type="text/html" title="[git] Merge, Rebase, Cheery-pick" /><published>2023-10-29T00:00:00+09:00</published><updated>2023-10-29T00:00:00+09:00</updated><id>http://localhost:4000/git/41</id><content type="html" xml:base="http://localhost:4000/git/41/">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이전까지 프로젝트를 하면서 git을 계속 사용했지만 내부 동작 방식을 제대로 이해하지 못한채로 사용했었다.&lt;br /&gt;
내부 동작 방식을 몰랐기 때문에 예측할 수 없는 상황이 많이 발생했었다. 예를들어 merge를 했는데 언제는 commit이 생기고 언제는 안생기는 등…&lt;br /&gt;
이번 기회에 git에 대해서 정리하고자 한다.&lt;/p&gt;

&lt;h2 id=&quot;merge&quot;&gt;merge&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt;란 두 브랜치를 합치는 기능을 의미한다. 일반적으로 많이 사용되는 병합 방식으로, 커밋 이력을 모두 남길 때 사용한다.&lt;br /&gt;
 merge 방식에는 &lt;strong&gt;Fast-forward, 3-way-merge&lt;/strong&gt; 가 있다. &lt;br /&gt;
하나씩 살펴보자 &lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fast-forward-방식&quot;&gt;Fast-forward 방식&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/41_1.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 브랜치에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hotfix&lt;/code&gt; 브랜치를 merge한다고 해보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/41_2.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;먼저 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkout&lt;/code&gt; 명령어를 사용해서 master 브랜치로 이동한다&lt;/li&gt;
  &lt;li&gt;그리고 hotfix 브랜치를 merge한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;결과를 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fast-forward&lt;/code&gt; 라는 문구가 보인다. 이게 무엇일까? &lt;br /&gt;&lt;br /&gt;
hotfix가 가리키는 C4 커밋은 C2 커밋을 base로 하는 브랜치이다. 때문에 merge를 진행함에 있어서 새로운 커밋을 생성할 필요가 없다. 그저 단순히 브랜치 포인터만 이동시켜서 master가 c4를 가리키게 하면된다. 이 경우와 같이 두 브랜치의 base가 같을 때 단순히 브랜치 포인터를 이동시키는 merge 방식을 &lt;strong&gt;fast-forward&lt;/strong&gt; 라고 한다. &lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-way-merge-방식&quot;&gt;3-way-merge 방식&lt;/h3&gt;

&lt;p&gt;이번에는 협업할 때 가장 많이 사용하는 merge 방식인 3-way-merge에 대해서 알아보겠다!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/41_3.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;my-branch가 main 브랜치의 B 커밋으로부터 분기됐다. 그리고나서 main에 새로운 커밋(C, D, E)이 생성된 경우를 생각해보자.&lt;br /&gt;
이 경우에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fast-forward&lt;/code&gt;같이 단순히 브랜치 포인터를 이동시키는 방식으로는 merge를 제대로 수행할 수 없다. &lt;br /&gt;
때문에 my-branch와 main을 공통 부모로 하는 새로운 커밋을 생성한다. 이 방식을 &lt;strong&gt;3-way Merge&lt;/strong&gt; 라고 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;fast-forward가 가능한 경우에도 Recursive Merge 방식처럼 커밋을 새로 생성하는 방법을 제공한다. git merge 명령에 &lt;strong&gt;–no-ff&lt;/strong&gt; 옵션을 주면 강제로 commit을 생성한 merge가 진행된다. &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conflict&quot;&gt;Conflict&lt;/h2&gt;

&lt;p&gt;다음으로는 merge할 때 발생할 수 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Conflict&lt;/code&gt;에 대해서 알아보자.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/41_1.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout master

//hotfix, iss53이 동일한 파일을 수정.
git merge hotfix
git merge iss53
//-&amp;gt; 충돌 발생!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다시 이 상황을 놓고 생각해보자. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 브랜치에서 필요한 기능이 있어서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iss53&lt;/code&gt; 브랜치를 생성해서 기능을 구현하고 있다.&lt;br /&gt;
그런데 도중에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 브랜치에서 오류를 발견해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hotfix&lt;/code&gt;브랜치를 만들어 오류를 수정하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hotfix&lt;/code&gt;브랜치를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; 브랜치에 merge했다. 그런데 hotfix 브랜치에서 수정한 부분이 iss53 기능 브랜치에서 수정한 부분이 동일하다고 가정하자.&lt;br /&gt;
그러면 merge를 수행할 때, 충돌이 발생하게 된다.&lt;br /&gt;
이 merge를 실행하는 시점에 git은 활성화되지 않은 새로운 커밋을 하나 생성한다. 그리고 IDE를 사용하던, 직접 충돌 부분을 수정하여 commit을 하면 충돌이 해결된다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;지금까지 merge 방식과 충돌에 대해서 알아봤다. 그런데 github에서 제공하는 merge는 조금 다르다. 총 3가지 방식이 있는데 하나씩 살펴보자&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;3가지-pull-request-방식&quot;&gt;3가지 pull request 방식&lt;/h1&gt;

&lt;h2 id=&quot;create-merge-commit&quot;&gt;Create merge commit&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/41_4.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;원래 기본적으로 base가 같을 때 merge를 수행하면 fast-forward 방식이 사용된다. 하지만 Create merge commit 방식은 새로운 commit을 만드는 방식을 사용한다.&lt;br /&gt;
이렇게 함으로써 기능 구현 후 merge 기록이 남게된다. 때문에 가독성이 높아진다. &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;squash-and-merge&quot;&gt;Squash and merge&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/41_5.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 방식도 Create merge commit 과 마찬가지로 새로운 커밋을 생성한다.&lt;br /&gt; Create merge commit과의 차이점은 feature에서 작업한 모든 commit을 하나의 commit으로 통합해서 merge한다.&lt;br /&gt;
-&amp;gt; pr 단위로 commit이 묶이기 때문에 가독성이 높아진다. &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rebase-and-merge&quot;&gt;Rebase and merge&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/41_6.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 방식은 merge 하는 모든 commit을 단순히 복사해서 붙여넣는다.&lt;br /&gt;
중간의 merge과정이 보이지 않고 history가 한줄로 나열되기 때문에 오히려 가독성이 떨어질 수도 있다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이번에는 merge와는 조금 다른 병합 방식인 rebase에 대해서 알아보겠다. &lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;rebase&quot;&gt;Rebase&lt;/h1&gt;

&lt;p&gt;현재 브랜치의 &lt;strong&gt;base를 재설정하여 합치는 것&lt;/strong&gt;을 말한다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/41_7.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;특징&quot;&gt;특징&lt;/h2&gt;

&lt;p&gt;Merge와 동일하게 브랜치를 합치는 목적으로 사용된다.
    - Commit History가 Merge와 다르게 선형적으로 그려진다.&lt;/p&gt;

&lt;p&gt;Rebase는 현재 브랜치의 base를 바꾸는 것이다.
    - 기존의 Commit을 복사하여 새로 생성한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cherry-pick&quot;&gt;Cherry-pick&lt;/h1&gt;

&lt;p&gt;다른 브랜치의 있는 commit을 현재 브랜치에 적용하는 것을 의미한다. &lt;br /&gt;
일반적으로 새로운 브랜치를 하나 파서 cherry-pick을 진행하고 원격 저장소에 push하고 main으로 pr을 날리는 것이 일반적이다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//한개의 커밋 가져오기
git cherry-pick 39c123

//여러개의 커밋 가져오기
git cherry-pick 39c123..bjkd12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cherry-pick-conflict&quot;&gt;Cherry-pick Conflict&lt;/h2&gt;

&lt;p&gt;해결 방법&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Conflict 발생 파일을 수정한다.&lt;/li&gt;
  &lt;li&gt;git add 명령어로 수정된 코드를 스테이지 상태로 변경시킨다.&lt;/li&gt;
  &lt;li&gt;git cherry-pick –continue 명령을 실행한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고-사이트&quot;&gt;참고 사이트&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://www.youtube.com/watch?v=b72mDco4g78&lt;/li&gt;
  &lt;li&gt;https://www.zehye.kr/git/2019/11/22/11git_merge_conflict/&lt;/li&gt;
  &lt;li&gt;https://hudi.blog/git-merge-squash-rebase/&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Moon JinSu</name></author><category term="git" /><category term="프로젝트 관리" /><category term="git" /><category term="우테코" /><summary type="html"></summary></entry><entry><title type="html">[클린코드] 일급 컬렉션</title><link href="http://localhost:4000/%ED%81%B4%EB%A6%B0%EC%BD%94%EB%93%9C/40/" rel="alternate" type="text/html" title="[클린코드] 일급 컬렉션" /><published>2023-10-25T00:00:00+09:00</published><updated>2023-10-25T00:00:00+09:00</updated><id>http://localhost:4000/%ED%81%B4%EB%A6%B0%EC%BD%94%EB%93%9C/40</id><content type="html" xml:base="http://localhost:4000/%ED%81%B4%EB%A6%B0%EC%BD%94%EB%93%9C/40/">&lt;p&gt;우테코 1주차 과제를 리팩토링하면서 일급 컬렉션이라는 개념에 대해서 알게 됐다. 오늘은 일급 컬렉션이 무엇인지, 그리고 언제 사용하면 유용한지에 대해서 소개하겠다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;일급-컬렉션이란-무엇일까&quot;&gt;일급 컬렉션이란 무엇일까?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;규칙 8: 일급 콜렉션 사용 &lt;br /&gt;
콜렉션을 포함한 클래스는 반드시 다른 멤버 변수가 없어야 한다. &lt;br /&gt;
각 콜렉션은 그 자체로 포장돼 있으므로 이제 콜렉션과 관련된 동작은 근거지가 마련된셈이다. &lt;br /&gt;
필터가 이 새 클래스의 일부가 됨을 알 수 있다. &lt;br /&gt;
필터는 또한 스스로 함수 객체가 될 수 있다. &lt;br /&gt;
또한 새 클래스는 두 그룹을 같이 묶는다든가 그룹의 각 원소에 규칙을 적용하는 등의 동작을 처리할 수 있다. &lt;br /&gt;
이는 인스턴스 변수에 대한 규칙의 확실한 확장이지만 그 자체를 위해서도 중요하다. &lt;br /&gt;
콜렉션은 실로 매우 유용한 원시 타입이다. &lt;br /&gt;
많은 동작이 있지만 후임 프로그래머나 유지보수 담당자에 의미적 의도나 단초는 거의 없다. - 소트웍스 앤솔로지 객체지향 생활체조편 &lt;br /&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 내용은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;객체지향 생활체조&lt;/code&gt;에서 소개된 내용이다. 개념 자체는 단순하다. 컬렉션을 클래스로 감싸고 다른 맴버 변수가 없도록 하면 이 클래스가 일급 컬렉션이 된다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;컬렉션을 감싸면서 얻는 이점은 다음과 같다. &lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;비지니스에 종속적인 자료구조가 된다.&lt;/li&gt;
  &lt;li&gt;컬렉션의 불변성을 보장한다.&lt;/li&gt;
  &lt;li&gt;상태와 행위를 한 곳에서 관리할 수 있다.&lt;/li&gt;
  &lt;li&gt;컬렉션에 이름을 부여할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이제 각각을 하나씩 설명해보겠다. &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;비지니스에-종속적인-자료구조&quot;&gt;비지니스에 종속적인 자료구조&lt;/h2&gt;

&lt;p&gt;아래와 같은 요구사항이 있다고 해보자. &lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;3자리의 수&lt;/li&gt;
  &lt;li&gt;각 수는 중복되면 X&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
이런 자료구조는 기본으로 제공하지 않는다. 이를 일반적인 자료구조로 구현하기 위해서는 이 요구사항을 만족시키는 값을 생성하는 모든 코드에 검증 로직을 추가해야 한다. 그리고 만약 신입이 처음 회사에 들어와서 코드를 작성하면 검증이 필요한 로직인지 알 수 있는 방법이 없다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;즉 모든 코드와 도메인을 알아야 제대로 코드를 작성할 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이런 검증 로직과 데이터를 묶는 비지니스에 종속적인 자료구조가 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;일급 컬렉션&lt;/code&gt;이다. 아래 코드를 보자 &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComputerNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ComputerNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;createComputerNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createComputerNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Randoms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pickNumberInRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randomNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randomNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;숫자를 저장하는 List를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComputerNumber&lt;/code&gt;라는 클래스로 감싸서 일급 컬렉션으로 만든 코드이다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComputerNumber&lt;/code&gt;라는 일급 컬렉션을 사용하게 되면 앞으로 &lt;strong&gt;길이가 3, 중복이 없는 숫자&lt;/strong&gt;를 생성할 때 이 객체를 사용하면 된다. 비지니스에 종속적인 자료구조를 직접 만든 것이다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;불변&quot;&gt;불변&lt;/h2&gt;

&lt;p&gt;일급 컬렉션은 불변을 보장한다. 이는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt;과는 차이가 있다. &lt;br /&gt;
&lt;strong&gt;java의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt;은 불변이 아니라 재할당만 금지한다.&lt;/strong&gt; 아래 코드를 보자&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FinalTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;final_test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Assertions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 코드를 실행하면 set에 값이  추가된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/40_1.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이와같이 자바의 final은 불변이 아니라 단순 재할당만 막는 기능을 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;최근의 소프트웨어의 규모가 계속 커짐에 따라 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;불변&lt;/code&gt;은 굉장히 중요한 키워드가 됐다. &lt;br /&gt;
이를 java의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt;로는 해결할 수 없는데 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;일급 컬렉션&lt;/code&gt;을 사용하면 불변 컬렉션을 만들 수 있다 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComputerNumber&lt;/code&gt; 클래스는 처음 생성자에서 숫자를 생성하고 그 이후 변경할 수 있는 setter가 없기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;불변&lt;/code&gt;을 보장한다. &lt;br /&gt;
이렇게 일급 컬렉션을 이용하면 불변 컬렉션을 만들 수 있다. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;상태와-행위를-함께-관리&quot;&gt;상태와 행위를 함께 관리&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;일급 컬렉션은 값과 로직을 함께 관리한다.&lt;/strong&gt; 일급 컬렉션을 사용하지 않으면 데이터와 로직이 떨어져 있기 때문에 관리상의 어려움이 있다. &lt;br /&gt; 이는 유지보수 측면에서 좋지 못하다. 전체 도메인을 알지 못하면 해당 로직이 구현되어 있는지 알 수 없어서 똑같은 로직을 구현하는 문제가 발생할 수 있다. &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;이름이-있는-컬렉션&quot;&gt;이름이 있는 컬렉션&lt;/h2&gt;

&lt;p&gt;일급 컬렉션을 사용하면 컬렉션에 이름을 붙일 수 있다.(클래스이기 때문에 가능) 이렇게 되면 검색도 편리하고 표현도 가능하게 된다. &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;이름있는_컬렉션&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newyorkItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createNewyorkItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seoulItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createSeoulItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 코드는 오직 변수명으로만 검색해야 하고, 개발자마다 뜻을 다르게 사용할 여지가 있다. 따라서 명확한 표현이 불가능하다. &lt;br /&gt;
아래 코드를 보자 &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;일급컬렉션&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;SeoulItems&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seoulItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SeoulItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createSeoulItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;BusanItems&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;busanItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BusanItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createBusanItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드같은 경우 일급 컬렉션을 기반으로 검색이 가능하다. 클래스 단위로 관리되기 때문에 검색이 쉽다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;이처럼 일급 컬렉션은 다양한 장점을 가지고 있고 유지보수 측면에서 굉장히 좋다. 필수적으로 공부하자!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고-사이트&quot;&gt;참고 사이트&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://jojoldu.tistory.com/412&lt;/li&gt;
  &lt;li&gt;https://jamie95.tistory.com/99&lt;/li&gt;
  &lt;li&gt;https://jamie95.tistory.com/entry/%EC%9D%BC%EA%B8%89-%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%84-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90&lt;/li&gt;
  &lt;li&gt;https://matouslescotousles.tistory.com/11&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Moon JinSu</name></author><category term="클린코드" /><category term="클린코드" /><category term="TDD" /><category term="우테코" /><summary type="html">우테코 1주차 과제를 리팩토링하면서 일급 컬렉션이라는 개념에 대해서 알게 됐다. 오늘은 일급 컬렉션이 무엇인지, 그리고 언제 사용하면 유용한지에 대해서 소개하겠다.</summary></entry><entry><title type="html">[Network] Layer4</title><link href="http://localhost:4000/network/39/" rel="alternate" type="text/html" title="[Network] Layer4" /><published>2023-10-10T00:00:00+09:00</published><updated>2023-10-10T00:00:00+09:00</updated><id>http://localhost:4000/network/39</id><content type="html" xml:base="http://localhost:4000/network/39/">&lt;h2 id=&quot;트랜스포트-계층의-역할-및-특징&quot;&gt;트랜스포트 계층의 역할 및 특징&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;각기 다른 호스트에서 동작하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;프로세스&lt;/code&gt; 사이의 &lt;strong&gt;논리적 통신&lt;/strong&gt;을 제공한다.
    &lt;ul&gt;
      &lt;li&gt;↔ 네트워크 계층 프로토콜은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;호스트&lt;/code&gt; 사이의 논리적 통신을 제공한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IP 및 Port 번호로 식별한다.
    &lt;ul&gt;
      &lt;li&gt;IP를 통해서 호스트를, Port를 통해서 프로세스를 찾아감.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;종단 시스템(end system, host)에 존재한다.
    &lt;ul&gt;
      &lt;li&gt;Network core, Access network에는 트랜스포트 프로토콜이 존재하지 않음.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IP 계층에 대한 다양한 제어를 수행한다.
    &lt;ul&gt;
      &lt;li&gt;동적으로 IP주소를 관리, IP 변환, IP 패킷의 흐름제어를 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PDU : 세그먼트(segment)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;다중화와-역다중화&quot;&gt;다중화와 역다중화&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;트랜스포트 계층&lt;/code&gt; ↔ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;애플리케이션 계층&lt;/code&gt; 간의 데이터를 주고 받게 해주는 서비스를 의미한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;역다중화 (demultiplexing)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;트랜스포트 계층 세그먼트의 데이터를 올바른 소켓으로 전달하는 작업을 &lt;strong&gt;역다중화&lt;/strong&gt; 라고 한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;수신된 PDU를 적절한 소켓으로 전달하는 것.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;다중화 (multiplexing)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;출발지 호스트에서 소켓으로부터 데이터를 모으고, 이에 대한 세그먼트를 생성하기 위해 각 데이터에 헤더 정보로 캡슐화하고, 그 세그먼트들을 네트워크 계층으로 전달하는 작업을 &lt;strong&gt;다중화&lt;/strong&gt; 라고 한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;여러 소켓을 통해서 SDU를 받아서 전송하는 것.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;포트-번호란&quot;&gt;포트 번호란?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;트랜스포트 계층에서의 식별자 역할을 하는 것을 말한다.&lt;/li&gt;
  &lt;li&gt;소켓에 대한 식별을 한다.&lt;/li&gt;
  &lt;li&gt;일반적으로 source/destination 별로 port 번호가 존재한다.&lt;/li&gt;
  &lt;li&gt;well-kown port number (0~1023)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/39_1.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;user-datagram-protocol-udp&quot;&gt;User Datagram Protocol (UDP)&lt;/h2&gt;

&lt;h3 id=&quot;특징&quot;&gt;특징&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;간단한 multiplexing/demultiplexing 기능의 프로토콜이다.&lt;/li&gt;
  &lt;li&gt;Port 번호와 Checksum만 헤에더 붙는다.&lt;/li&gt;
  &lt;li&gt;사실상 IP 의 기능만 수행하며, 애플리케이션 계층에서 흐름 제어, 기타 기능을 구현한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;연결 과정 없이 바로 전송이 가능하다.&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;비연결형&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;연결을 하지 않고 별도의 흐름제어, 혼잡제어를 수행하지 않기 때문에 TCP 보다 속도가 빠르다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;헤더의 크기가 작다. (8byte) ↔ TCP는 20 byte&lt;/li&gt;
  &lt;li&gt;ex) DNS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;송수신-과정&quot;&gt;송수신 과정&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;UDP 소켓의 생성
    &lt;ul&gt;
      &lt;li&gt;애플리케이션 프로세스에서 소켓 생성 즉시 트랜스포트 계층의 port 번호가 부여된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UDP segment 송수신
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Two tuple : 목적지 IP &amp;amp; port 번호&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;수신 port 번호가 같으면 동일한 소켓으로 들어간다. ↔ TCP는 송신 port 번호도 고려하여 소켓으로 매핑된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;상대방 호스트의 port 가 열려있으면 항상 전송이 가능하다.&lt;/li&gt;
      &lt;li&gt;IP, port 번호를 지정해서 보내면 바로 전달이 가능하다. (비연결형)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Source port의 존재 의의
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;return address&lt;/strong&gt; 개념이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;udp-세그먼트-구조&quot;&gt;UDP 세그먼트 구조&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/39_2.png&quot; alt=&quot;img2&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;신뢰적인-데이터-전송의-원리&quot;&gt;신뢰적인 데이터 전송의 원리&lt;/h2&gt;

&lt;h3 id=&quot;automatic-repeat-request-arq&quot;&gt;Automatic Repeat reQuest (ARQ)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Acknowlegement + timer + reactions&lt;/li&gt;
  &lt;li&gt;신뢰성 있는 PDU 전송을 위한 가장 보편적인 프로토콜 함수&lt;/li&gt;
  &lt;li&gt;TX/RX 가 confimation (ACK)를 받거나 timer-out 까지 기다리는 동안 하는 일련의 동작을 포함한다.&lt;/li&gt;
  &lt;li&gt;재전송 방법에 따라 여러 방식이 존재
    &lt;ul&gt;
      &lt;li&gt;stop and wait&lt;/li&gt;
      &lt;li&gt;go back N (GBN)&lt;/li&gt;
      &lt;li&gt;selective repeat (SR)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gbn-go-back-n&quot;&gt;GBN (Go Back N)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/39_3.png&quot; alt=&quot;img3&quot; width=&quot;40%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;N번째 unconfirmed PDU로 돌아가서 거기서부터 재전송을 한다.&lt;/li&gt;
  &lt;li&gt;TX entity는 acknowledged 되기 전까지 보낸 PDU를 그대로 버퍼에 저장하고 있어야 한다.&lt;/li&gt;
  &lt;li&gt;RX entity는 N번째 PDU가 문제가 생기면 이후에 PDU(N+1~)는 모두 버린다.&lt;/li&gt;
  &lt;li&gt;time-out의 경우 N번째 PDU부터 재전송한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sr-selective-repeat&quot;&gt;SR (Selective Repeat)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/39_4.png&quot; alt=&quot;img4&quot; width=&quot;40%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;손실된 PDU에 대해서만 골라서 재전송한다.&lt;/li&gt;
  &lt;li&gt;RX entity는 제대로 받은 PDU를 저장한다.&lt;/li&gt;
  &lt;li&gt;transmission order대로 다 받을때 까지 저장한다.&lt;/li&gt;
  &lt;li&gt;cumulative ACK를 통해 제대로 전달된 PDU를 TX entity에서 확인한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gbn-vs-sr&quot;&gt;GBN VS SR&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;SR은 RX entity 측에 buffer가 요구된다.&lt;/li&gt;
  &lt;li&gt;GBN은 TX entity 측에 buffer가 요구된다.&lt;/li&gt;
  &lt;li&gt;GBN은 재전송 수신까지 시간이 좀 걸리는데 SR은 상대적으로 재전송 수신이 덜 걸린다.
    &lt;ul&gt;
      &lt;li&gt;필요한 것만 보내면 되기 때문에&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;TCP 는 SR과 GBN 의 혼합형이라고 생각하면 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;transmission-control-protocol-tcp&quot;&gt;Transmission Control Protocol (TCP)&lt;/h2&gt;

&lt;h3 id=&quot;특징-1&quot;&gt;특징&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;연결 지향형&lt;/strong&gt;이다.
    &lt;ul&gt;
      &lt;li&gt;connection establishment 과정이 존재한다.&lt;/li&gt;
      &lt;li&gt;connection이 존재 해야지만 세그먼트를 전달할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;전이중 서비스(full-duplex service)&lt;/strong&gt; 를 제공한다.
    &lt;ul&gt;
      &lt;li&gt;A와 B가 연결되어 있으면 A→B, B→A 양방향으로 흐를 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TCP 연결은 항상 단일 송신자와 단일 수신자 사이의 &lt;strong&gt;점대점(point-to-point)&lt;/strong&gt; 이다.
    &lt;ul&gt;
      &lt;li&gt;한 송신자가 멀티캐스팅할 수 없음.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Four tuple&lt;/strong&gt; : source IP/port number, destination IP/port number 로 구성된다.&lt;/li&gt;
  &lt;li&gt;UDP와 다르게 source에 대한 정보까지 고려야여 소켓에 매핑된다.&lt;/li&gt;
  &lt;li&gt;TCP 는 신뢰적 데이터 전송을 제공한다.
    &lt;ul&gt;
      &lt;li&gt;재전송 및 ARQ 기능을 포함한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-way-handshake&quot;&gt;3-way handshake&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/39_5.png&quot; alt=&quot;img5&quot; width=&quot;40%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;request / setup / complete
    &lt;ul&gt;
      &lt;li&gt;initiator가 confirmation 수신에 대해 responder에게 confirm을 또 해준다. (complete)&lt;/li&gt;
      &lt;li&gt;responder는 complete 수신후에 connection이 맺어진 것으로 간주한다.&lt;/li&gt;
      &lt;li&gt;complete가 loss가 일어나도 responser는 connection이 맺어진 상태로 가정할 수 있다.
        &lt;ul&gt;
          &lt;li&gt;이전에 request를 받았으므로, connection을 맺고자 하는 initiator 의 상태는 이미 확인했다.&lt;/li&gt;
          &lt;li&gt;후속 data PDU을 수신하면 complete를 수신한 것으로 간주할 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;흐름제어&quot;&gt;흐름제어&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;송신자가 수신자의 버퍼를 오버플로시키는 것을 방지하기 위해 속도를 조절하는 것을 의미(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;송신자의 억제&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;송수신 entity 사이에 교환되는 PDU 개수를 조정하는 것을 의미한다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;방식&quot;&gt;방식&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;credit procedure
    &lt;ul&gt;
      &lt;li&gt;수신 측에서 credit을 주고, sender는 허용된 credit에 따라 전송한다.&lt;/li&gt;
      &lt;li&gt;송신 측은 허용된 범위의 PDU를 보내고 나서 credit을 새로 받을때까지 대기한다.&lt;/li&gt;
      &lt;li&gt;Sliding window protocol
        &lt;ul&gt;
          &lt;li&gt;수신측이 제공한  credit 정보는 곳 window를 sliding 해주는 양&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/39_6.png&quot; alt=&quot;img6&quot; width=&quot;40%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Rate-based flow control
        &lt;ul&gt;
          &lt;li&gt;end-to-end 제한 뿐 아니라 network load도 고려한 흐름 제어&lt;/li&gt;
          &lt;li&gt;network의 overload 상황을 방지할 수 있음.&lt;/li&gt;
          &lt;li&gt;송신 측에서 전송률에 대한 제한을 두고 전송&lt;/li&gt;
          &lt;li&gt;허용된  burst size(특정 시간동안 보내는 data)를 제어&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/39_7.png&quot; alt=&quot;img7&quot; width=&quot;40%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/39_8.png&quot; alt=&quot;img8&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;혼잡제어&quot;&gt;혼잡제어&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/39_9.png&quot; alt=&quot;img9&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;네트워크가 혼잡해지면 라우터 버퍼의 오버플로우가 발생할 수 있고 이에 따라 패킷손실이 발생할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;패킷 손실 → 재전송 → 시간 지연이 발생한다.
        &lt;ul&gt;
          &lt;li&gt;때문에 네트워크의 상태를 고려해서 데이터를 잘 전송해야 한다. (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;혼잡제어&lt;/code&gt;)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;slow start &amp;amp; Dynamic window sizing&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;정상적으로 전송 - 피드백을 주고받는 상황에서는 서서히 윈도우 크기를 확장한다.&lt;/li&gt;
      &lt;li&gt;혼잡 상황에서는 임의로 윈도우 사이즈를 줄인다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tcp-세그먼트-구조&quot;&gt;TCP 세그먼트 구조&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/39_10.png&quot; alt=&quot;img10&quot; width=&quot;50%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>Moon JinSu</name></author><category term="Network" /><category term="Network" /><summary type="html">트랜스포트 계층의 역할 및 특징</summary></entry><entry><title type="html">[Network] Layer3</title><link href="http://localhost:4000/network/38/" rel="alternate" type="text/html" title="[Network] Layer3" /><published>2023-10-06T00:00:00+09:00</published><updated>2023-10-06T00:00:00+09:00</updated><id>http://localhost:4000/network/38</id><content type="html" xml:base="http://localhost:4000/network/38/">&lt;h2 id=&quot;네트워크-계층의-역할&quot;&gt;네트워크 계층의 역할&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;네트워크 상에서 end-to-end로 패킷을 전달하는 역할&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;포워딩 (Forwarding)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;입력 포트로 들어오는 패킷을 다른 출력 포트로 전송하는 동작
        &lt;ul&gt;
          &lt;li&gt;포워딩 테이블을 기반으로 동작한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Data plane에서 수행된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;라우팅 (Routing)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;경로를 파악하기 위한 제어 동작&lt;/li&gt;
      &lt;li&gt;라우팅 알고리즘을 통해서 포워딩 테이블을 생성한다.&lt;/li&gt;
      &lt;li&gt;Control plane 에서 수행된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;데이터-제어-평면-역할&quot;&gt;데이터, 제어 평면 역할&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 평면 (data plane)
    &lt;ul&gt;
      &lt;li&gt;IP 헤더 분석 및 포워딩&lt;/li&gt;
      &lt;li&gt;Fragmentation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;제어 평면 (control plane)
    &lt;ul&gt;
      &lt;li&gt;라우팅 알고리즘&lt;/li&gt;
      &lt;li&gt;ICMP&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;네트워크-서비스-모델&quot;&gt;네트워크 서비스 모델&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;인터넷 네트워크 계층은 최선형 서비스(best-effort-service)를 제공한다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;최선을 다하지만 결과는 보장하지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;라우터의-구성요소&quot;&gt;라우터의 구성요소&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;입력 포트&lt;/li&gt;
  &lt;li&gt;출력 포트&lt;/li&gt;
  &lt;li&gt;스위치 구조
    &lt;ul&gt;
      &lt;li&gt;라우터의 입력 포트와 출력 포트 연결&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;라우팅 프로세스
    &lt;ul&gt;
      &lt;li&gt;기존 라우터에서는 라우팅 알고리즘을 실행하여 포워딩 테이블을 만들었는데 SDN 라우터는 라우팅 프로세서가 원격 컨트롤러와 통신하여 원격 컨트롤러에서 계산된 포워딩 테이블을 가져와서 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;큐잉&quot;&gt;큐잉&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;도착하는 모든 패킷을 전송하기에 스위치가 충분히 빠른 속도로 이뤄지지 않을 때 발생한다.&lt;/li&gt;
  &lt;li&gt;입력, 출력 포트에서 발생한다.&lt;/li&gt;
  &lt;li&gt;큐잉 버퍼가 가득찬 상태에서 패킷이 도착하면 패킷을 버리게 된다.
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;버퍼를 크게하면 패킷을 버리는 경우가 줄어들어서 좋을까?&lt;/em&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;패킷 손실이 줄어드는 것보다 버퍼가 클수록 큐잉 지연이 길어진다고 생각하는 게 옳다.&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;패킷-스케줄링&quot;&gt;패킷 스케줄링&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;FCFS, FIFO
    &lt;ul&gt;
      &lt;li&gt;먼저 도착한 패킷을 먼저 서비스한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;우선순위 큐잉
    &lt;ul&gt;
      &lt;li&gt;클래스마다 우선순위가 있고 높은 우선순위의 클래스가 먼저 서비스된다. 동일한 우선순위라면 FIFO 방식으로 서비스한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;라운드 로빈
    &lt;ul&gt;
      &lt;li&gt;클래스로 큐를 분리한다. 하지만 큐 사이의 우선순위가 존재하지 않고 스케줄러가 번갈아가면서 서비스한다. 동일한 큐에 있는 클래스는 FIFO 방식으로 서비스된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WFQ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;인터넷-프로토콜-ip&quot;&gt;인터넷 프로토콜 (IP)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;3계층 프로토콜 중 하나이다.&lt;/li&gt;
  &lt;li&gt;비연결형 서비스
    &lt;ul&gt;
      &lt;li&gt;상대방 엔티티와 연결을 맺는 개념이 없고, 그때그때 도달하는 패킷을 기준으로 동작한다.&lt;/li&gt;
      &lt;li&gt;유연하고 동작 측면에서 오버헤드가 적다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ipv4&quot;&gt;IPv4&lt;/h2&gt;

&lt;h2 id=&quot;데이터그램&quot;&gt;데이터그램&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/38_1.png&quot; alt=&quot;img1&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;주소-체계&quot;&gt;주소 체계&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;IP에서 사용하는 32bit (4 byptes) 주소&lt;/li&gt;
  &lt;li&gt;호스트나 라우터의 인터페이스별로 존재한다.&lt;/li&gt;
  &lt;li&gt;2^32, 약 40억개가 존재한다.&lt;/li&gt;
  &lt;li&gt;Dotted-decimal notation
    &lt;ul&gt;
      &lt;li&gt;x.y.z.w 형태이며, 각 숫자는 8bit, 0 ~255 이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;일반적으로 인터넷내에서 globally unique
    &lt;ul&gt;
      &lt;li&gt;NAT 영역은 locally unique&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;인터넷--주소와-서브넷&quot;&gt;인터넷  주소와 서브넷&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/38_2.png&quot; alt=&quot;img2&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;빨간색으로 묶인 부분이 서브넷이다.&lt;/li&gt;
  &lt;li&gt;물리적으로 비슷한 위치에 존재하고 L1/L2 수준에서 같은 영역에 존재한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;서브넷&lt;/strong&gt; : IP 주소 앞부분(prefix)로 지칭된다.
    &lt;ul&gt;
      &lt;li&gt;223.1.1.0/24 : 앞부분 24bit의 IP가 서브넷 주소이다.&lt;/li&gt;
      &lt;li&gt;prefix를 제외한 나머지 IP 주소 bit가 한 서브넷 안에 포함될 수 있는 호스트의 수이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;호스트-주소-획득&quot;&gt;호스트 주소 획득&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;기관 담당자에게 직접 신청해서 수동으로 설정&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DHCP 프로토콜에 의한 자동 할당&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;클라이언트-서버 프로토콜이다.&lt;/li&gt;
      &lt;li&gt;주소 할당 과정
        &lt;ul&gt;
          &lt;li&gt;DHCP server discover
            &lt;ul&gt;
              &lt;li&gt;DHCP 서버를 찾는 메시지 (UDP port 67)&lt;/li&gt;
              &lt;li&gt;IP : 255.255.255.255 : 브로드캐스트&lt;/li&gt;
              &lt;li&gt;브로드캐스팅을 하는 이유는 현재 호스트와 가장 가까운 곳에서 주소를 얻기 위해서&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;DHCP server offer
            &lt;ul&gt;
              &lt;li&gt;server가 자신의 존재를 알리는 것. (브로드캐스팅)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;DHCP request - DHCP ACK&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/38_3.png&quot; alt=&quot;img3&quot; width=&quot;40%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;nat&quot;&gt;NAT&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/38_4.png&quot; alt=&quot;img4&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;하나의 IP로 할당 받아 내부의 서브넷의 여러 호스트에게 공통으로 서비스하는 방식을 말한다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;내부적으로는 IP를 따로 주면서 외부로 나갈 때 할당된 하나의 IP를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/38_5.png&quot; alt=&quot;img5&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;외부 IP + Port 번호와 내부 IP/Port 를 매핑한다.&lt;/li&gt;
  &lt;li&gt;NAT 변환 테이블을 통해 outer → internal routing을 수행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nat의-역할&quot;&gt;NAT의 역할&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;외부IP 하나로 여러 호스트를 네트워킹할 수 있다.&lt;/li&gt;
  &lt;li&gt;부족한 IP address 수에 대한 보완책이다.&lt;/li&gt;
  &lt;li&gt;인터넷 네트워크내의 호스트를 감추는 역할을 한다.
    &lt;ul&gt;
      &lt;li&gt;외부에서는 하나의 IP로 밖에 보이지 않는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ipv6&quot;&gt;IPv6&lt;/h2&gt;

&lt;h2 id=&quot;데이터그램-1&quot;&gt;데이터그램&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/38_6.png&quot; alt=&quot;img6&quot; width=&quot;70%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;기존 IPv4에서는 IP 주소가 32bit 이었는데 IPv6에서는 128bit으로 확장됐다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;40bit 고정 크기의 헤더를 정의했다.
    &lt;ul&gt;
      &lt;li&gt;새로운 옵션 인코딩으로 유연한 옵션 처리가 가능해졌다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;흐름제어를 할 수 있는 Flow label 이 추가됐다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sdn&quot;&gt;SDN&lt;/h3&gt;

&lt;h2 id=&quot;라우팅-알고리즘&quot;&gt;라우팅 알고리즘&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;송신자부터 수신자까지 라우터의 네트워크를 통과하는 좋은 경로를 결정하는 알고리즘&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;라우팅 알고리즘을 통해 포워딩 테이블을 생성한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;포워딩 테이블&lt;/code&gt; : 입력 데이터그램에 대한 출력 포트를 정의하기 위해 각 라우터가 보유한 표&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;제어 평면에서 수행된다.&lt;/li&gt;
  &lt;li&gt;데이터 평면에서는 포워딩 테이블을 이용해서 패킷 포워딩을 수행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;라우팅-알고리즘의-종류&quot;&gt;라우팅 알고리즘의 종류&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;중앙 집중형 라우팅 알고리즘
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;네트워크 전체에 대한 완전한 정보를 가지고 출발지와 목적지 사이의 최소 비용 경로 계산&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;모든 노드 사이의 연결 상태와 링크 비용을 사전에 알아야 한다.&lt;/li&gt;
      &lt;li&gt;링크-상태 알고리즘 (Linked-state algorithm)
        &lt;ul&gt;
          &lt;li&gt;OSPF (AS 내)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;분산 라우팅 알고리즘
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;라우터들에 의해 반복적이고 분산적으로 수행된다.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;각 노드가 모든 링크에 대한 정보를 완벽하게 가지지 않고, 자신과 연결된 링크에 대한 정보만 가지고 단계적으로 동작한다.&lt;/li&gt;
      &lt;li&gt;거리 백터 알고리즘 (Distance vector algorithm)
        &lt;ul&gt;
          &lt;li&gt;BGP (AS 간)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정적-동적-라우팅-알고리즘&quot;&gt;정적, 동적 라우팅 알고리즘&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;정적 라우팅 알고리즘
    &lt;ul&gt;
      &lt;li&gt;포워딩 테이블이 시간에 따라 변하지 않거나 거의 안 변한다.&lt;/li&gt;
      &lt;li&gt;사람에 의한 조작에 의해서 변한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;동적 라우팅 알고리즘
    &lt;ul&gt;
      &lt;li&gt;traffic load 및 topology 변화에 의해서 자동으로 포워딩 테이블이 갱신된다.&lt;/li&gt;
      &lt;li&gt;Routing loop 나 oscillation 문제가 발생할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;링크-상태-알고리즘&quot;&gt;링크 상태 알고리즘&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;링크 상태 브로드캐스트 알고리즘을 먼저 수행한다.
    &lt;ul&gt;
      &lt;li&gt;각자의 식별자와 링크 별 비용 정보를 이웃에게 전달한다.&lt;/li&gt;
      &lt;li&gt;→ 모든 링크에 대한 정보를 얻는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다익스트라(Dijkstra) 알고리즘을 사용한다. O(NlogN)&lt;/li&gt;
  &lt;li&gt;트래픽 상태에 따라서 라우팅 경로가 안정적이지 못하고 진동할 수 있다. → oscillation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;거리-벡터-알고리즘&quot;&gt;거리 벡터 알고리즘&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;링크 상태 알고리즘과 다르게 비동기적이고 분산적으로 동작한다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;이웃 노드끼리만 정보를 주고 받으면서 라우팅 알고리즘을 수행한다.&lt;/li&gt;
  &lt;li&gt;벨만 포트 (Bellman-Ford) 알고리즘을 사용한다. O(N^3)
    &lt;ul&gt;
      &lt;li&gt;모든 노드에 대해서 edge relaxation 수행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;자율-시스템-autonomous-system&quot;&gt;자율 시스템 (autonomous system)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;한 기관이 관리하는 라우터 및 네트워크 모음
    &lt;ul&gt;
      &lt;li&gt;동일한 라우팅 프로토콜에 의해서 제어, 동작된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인터넷은 서브넷과 gateway 라우터 형태로 계층적인 네트워크를 형성한다.
    &lt;ul&gt;
      &lt;li&gt;즉 서브넷간 패킷 라우팅은 반드시 gateway 라우터를 거친다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ospf-as-내부&quot;&gt;OSPF (AS 내부)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;중앙 집중형 라우팅 알고리즘 중 하나이다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AS 내부에서 사용되는 프로토콜이다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;과정
    &lt;ul&gt;
      &lt;li&gt;모든 링크 정보를 가진 상태에서 경로를 찾는 작업을 수행한다.
        &lt;ul&gt;
          &lt;li&gt;flooding을 통해서 수행된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Dijkstra 알고리즘을 통해 경로를 계산한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;링크 상태가 변경되거나 30분마다 한번 씩 브로드캐스팅이 수행된다. (견고성 Up)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bgp-as-간&quot;&gt;BGP (AS 간)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;분산 라우팅 알고리즘 중 하나이다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AS 간 라우팅을 위한 프로토콜이다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;서브넷 prefix를 향해서 전달된다.&lt;/li&gt;
  &lt;li&gt;수행
    &lt;ul&gt;
      &lt;li&gt;인접 AS 간 서브넷 도달 정보를 교환한다.&lt;/li&gt;
      &lt;li&gt;도달 정보에 대해 AS내 라우터에게 전달한다.&lt;/li&gt;
      &lt;li&gt;서브넷에 대한 라우팅 경로를 결정한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;라우터의 종류
    &lt;ul&gt;
      &lt;li&gt;게이트웨이 라우터
        &lt;ul&gt;
          &lt;li&gt;AS의 경계에 있는 라우터로 다른 AS들에 있는 하나 또는 여러 개의 라우터와 직접 연결된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;내부 라우터
        &lt;ul&gt;
          &lt;li&gt;AS내에 있는 호스트 및 라우터와만 연결된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;포워딩 테이블을 생성할 때, AS 외부의 라우터가 포함되면 BGP, OSPF 알고리즘 둘 다 사용된다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;AS 내부에서 경로를 찾을 때, OSPF가 사용되고 AS간 경로를 찾을 때, BGP 가 사용됨.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;icmp-프로토콜&quot;&gt;ICMP 프로토콜&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;호스트, 라우터간  메시지를 주고받게 하는 프로토콜&lt;/li&gt;
  &lt;li&gt;데이터 전송 목적이 아닌 네트워크 관리를 위해서 주로 사용된다.
    &lt;ul&gt;
      &lt;li&gt;IP연결 상태를 확인하기 위해서 사용된다.&lt;/li&gt;
      &lt;li&gt;ICMP를 이용해서 IP 단에서 패킷이 송수신 되는 지 확인한다.
        &lt;ul&gt;
          &lt;li&gt;ICMP 메시지가 IP 데이터그램에 담겨 전송되므로 IP 바로 위에 존재한다.&lt;/li&gt;
          &lt;li&gt;TCP/UDP 와 같이 ICMP 도 역다중화한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ex) ping&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Moon JinSu</name></author><category term="Network" /><category term="Network" /><summary type="html">네트워크 계층의 역할</summary></entry><entry><title type="html">[Network] 컴퓨터 네트워크와 인터넷</title><link href="http://localhost:4000/network/36/" rel="alternate" type="text/html" title="[Network] 컴퓨터 네트워크와 인터넷" /><published>2023-09-10T00:00:00+09:00</published><updated>2023-09-10T00:00:00+09:00</updated><id>http://localhost:4000/network/36</id><content type="html" xml:base="http://localhost:4000/network/36/">&lt;h3 id=&quot;internet-이란&quot;&gt;Internet 이란?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;인터넷은 컴퓨터로 연결하여 &lt;strong&gt;TCP/IP&lt;/strong&gt; 라는 통신 프로토콜을 이용해 정보를 주고 받는 &lt;strong&gt;컴퓨터 네트워크&lt;/strong&gt;를 의미한다.&lt;/li&gt;
  &lt;li&gt;Date를 전달하는 장치들이 이루는 거대한 network 망이다&lt;/li&gt;
  &lt;li&gt;end system(host) 에 통신 서비스를 제공하는 존재이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;구성&quot;&gt;구성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;여러 형태의 sub-network로 구성된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;End system&lt;/code&gt; : 노트북, 휴대폰, 컴퓨터 등 네트워크를 이용하는 말단 부분&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access Network&lt;/code&gt; : end system에 해당하는 기기들이 인터넷에 접속하기 위해 사용하는 네트워크로 sub-network의 기반이 되는 기술&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;network&lt;/code&gt; : end system의 정보를 전달하는 역할을 하는 부분&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;end system&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인터넷과 연결된 가장 말단의 존재&lt;/li&gt;
  &lt;li&gt;web browser, email, client, server …&lt;/li&gt;
  &lt;li&gt;점점 범위가 확장되고 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;access network&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;End system이 Internet의 첫 부분과 연결되는 구간, Edge router&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Home&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;FTTH, cable internet access ..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enterprise&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;LAN : Ethernet, WIFI&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WAN&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;3G, LTE, 5G ..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;network core&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;네트워크의 핵심 부분&lt;/li&gt;
  &lt;li&gt;end system의 정보를 전달하는 역할&lt;/li&gt;
  &lt;li&gt;packet 기반으로 동작
    &lt;ul&gt;
      &lt;li&gt;router, link-layer switch를 통해서 원하는 곳으로 패킷을 전달하는 역할을 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;store-and-forward transmission
    &lt;ul&gt;
      &lt;li&gt;스위치가 출력 링크로 패킷의 첫 비트를 전송하기 전에 전체 패킷을 받는 것을 의미한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;packet&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Internet에서의 정보를 전달하는 전송 기본 단위&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;packet switching network&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;packet 기반으로 전달을 하는 통신 네트워크&lt;/li&gt;
  &lt;li&gt;모든 통신이 packet 형태로 이루어짐.&lt;/li&gt;
  &lt;li&gt;대표적으로 Internet 이 여기에 속한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Congestion&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;여러개의 입력 node와 연결된 packet switch에서의 혼잡 현상&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Queueing&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;혼잡 현상을 해결하기 packet switching에 대기열을 만들고 대기열에 packet을 쌓는다. 어떤걸 먼저 보낼지는 Queueing에 설정된 프로토콜에 맞춰서 전달된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Packet Loss&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;너무 많은 packet 으로 인해서 Queue가 가득차게 되면서 packet을 버리게 되는 것을 의미한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Router&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;packet을 적절하게 전달하는 역할을 수행한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Forwarding table&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;packet의 목적지를 forwarding table과 비교하고 어디로 내보낼 지 결정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Routing protocol&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Forwarding table을 만드는 알고리즘(프로토콜)을 말한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Protocol&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Internet 내에서 각 entity들의 동작 그 자체를 정의한다.&lt;/li&gt;
  &lt;li&gt;정보 송수신에 대한 기능적 실체&lt;/li&gt;
  &lt;li&gt;주로 주고받는 메시지 + 관련 동작을 정의한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;계층-구조&quot;&gt;계층 구조&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;애플리케이션 계층&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;각 end system에 있는 애플리케이션끼리 정보 패킷을 교환할 때 사용한다.&lt;/li&gt;
  &lt;li&gt;HTTP, SMPT, FTP, DNS …&lt;/li&gt;
  &lt;li&gt;PDU : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Message&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;트랜스포트 계층&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;연결지향형 서비스 제공&lt;/li&gt;
      &lt;li&gt;긴 메시지를 짧은 메시지로 나누고 혼잡 제어 기능을 제공한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDP&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;비연결성 서비스 제공&lt;/li&gt;
      &lt;li&gt;서비스 신뢰성, 흐름 제어, 혼잡 제어를 제공하지 않는다. (대신 빠르다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PDU : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Segment&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;네트워크 계층&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;end system to end system으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;데이터그램(datagram)&lt;/code&gt; 을 라우팅하는 책임을 진다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;라우팅 프로토콜&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP 프로토콜&lt;/code&gt;을 포함한다.&lt;/li&gt;
  &lt;li&gt;Routing, Forwarding을 해준다.&lt;/li&gt;
  &lt;li&gt;PDU : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;packet&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;링크 계층&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;송신 노드부터 수신 노드까지 하나의 링크를 통해 신뢰적인 전송을 제공한다.&lt;/li&gt;
  &lt;li&gt;네트워크 내에서 Packet 흐름을 결정하는 핵심 역할을 수행한다.&lt;/li&gt;
  &lt;li&gt;L1(물리 계층)에 의존적이다.&lt;/li&gt;
  &lt;li&gt;PDU : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frame&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;물리 계층&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;링크 계층과 서로 엮여서 동작한다.&lt;/li&gt;
  &lt;li&gt;1:1 상황에서 직접적인 물리 신호를 주고 받아서 정보를 전달한다.&lt;/li&gt;
  &lt;li&gt;PDU : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;캡슐화&quot;&gt;캡슐화&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;layer를 통과할 때 PCI가 붙으면서 PDU의 크기가 커지고 헤더도 계속 붙는다. 이렇게 계속 감싸지는 것을 캡슐화라고 한다.&lt;/li&gt;
  &lt;li&gt;각 layer는 자신만의 정보 header를 붙이면서, 상위 layer의 packet을 캡슐화한다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Moon JinSu</name></author><category term="Network" /><category term="Network" /><summary type="html">Internet 이란?</summary></entry><entry><title type="html">[Network] Layer5</title><link href="http://localhost:4000/network/layer5/37/" rel="alternate" type="text/html" title="[Network] Layer5" /><published>2023-09-10T00:00:00+09:00</published><updated>2023-09-10T00:00:00+09:00</updated><id>http://localhost:4000/network/layer5/37</id><content type="html" xml:base="http://localhost:4000/network/layer5/37/">&lt;h2 id=&quot;application-layer의-특징&quot;&gt;application layer의 특징&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;protocol stack의 가장 위에 존재한다.&lt;/li&gt;
  &lt;li&gt;사용자가 직접 접하는 protocol 이다.&lt;/li&gt;
  &lt;li&gt;socket을 통해서 transport layer 와 통신한다.
    &lt;ul&gt;
      &lt;li&gt;socket : 프로세스와 네트워크 사이의 인터페이스이다. (IP + Port로 식별)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;application layer가 존재하는 end system 끼리 소통한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;transport-layer에서-application-layer에-제공하는-서비스&quot;&gt;transport layer에서 application layer에 제공하는 서비스&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;신뢰적 데이터 전송&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;보장된 데이터 전송 서비스를 제공하는 것을 의미한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;처리율&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;어느 명시된 속도에서 보장된 가용 처리율을 제공하는 것을 의미한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;시간&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;데이터 전송에 엄격한 시간 제한 조건이 있고 이 시간안에 전송되는 것을 보장하는 것을 의미한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;보안&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;하나 이상의 보안 서비스를 제공한다.&lt;/li&gt;
      &lt;li&gt;송신 프로세스가 보내는 모든 데이터를 암호화해서 보내고 수신 프로세스가 받기 전에 암호를 해독한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tcp와-udp&quot;&gt;TCP와 UDP&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TCP&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;연결지향형 서비스를 제공한다.&lt;/li&gt;
      &lt;li&gt;신뢰적인 데이터 전송 서비스를 제공한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UDP&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;비연결형 서비스이다.&lt;/li&gt;
      &lt;li&gt;handshake 과정없이 바로 데이터를 송신한다.&lt;/li&gt;
      &lt;li&gt;속도가 빠르다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;http-protocol&quot;&gt;HTTP protocol&lt;/h2&gt;

&lt;h3 id=&quot;특징&quot;&gt;특징&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;web을 실현해주는 전송 프로토콜이다.&lt;/li&gt;
  &lt;li&gt;Web browser, Web Server 두 개의 프로그램으로 구성된다.
    &lt;ul&gt;
      &lt;li&gt;Client : 필요할 때마다 필요한 것을 서버에 요구한다.&lt;/li&gt;
      &lt;li&gt;Server : 단순히 client 의 요구에 대해 응답만 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;stateless protocol 이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;비지속-연결과-지속-연결&quot;&gt;비지속 연결과 지속 연결&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;비지속 연결&lt;/code&gt; (Non-persistent Connection)
    &lt;ul&gt;
      &lt;li&gt;각 요구/응답 쌍이 분리된 TCP 연결을 통해서 전송된다.&lt;/li&gt;
      &lt;li&gt;server에서 TCP 연결 관리에 대한 부담이 상대적으로 크다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;지속 연결&lt;/code&gt; (Persistent Connection)
    &lt;ul&gt;
      &lt;li&gt;모든 요구와 해당하는 응답들이 같은 TCP 연결 상으로 전송된다.&lt;/li&gt;
      &lt;li&gt;일정 시간동안 TCP 연결을 사용하지 않으면 release 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http-메시지&quot;&gt;HTTP 메시지&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Request&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;request line : Method, URL, HTTP version&lt;/li&gt;
      &lt;li&gt;header lines : host, persistent 여부, user-agent, 기타 옵션들&lt;/li&gt;
      &lt;li&gt;body : 부가적으로 server에 보낼 정보&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Response&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;status line : protocl version, status code, status message&lt;/li&gt;
      &lt;li&gt;header lines : persistent 여부, 전송날짜, 서버 프로그램, 생성날짜, 길이, 내용 등등&lt;/li&gt;
      &lt;li&gt;body : data, object, html …&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cookies&quot;&gt;Cookies&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP에게 state를 가지게 해준다.
    &lt;ul&gt;
      &lt;li&gt;backend database : Web site측에서 복잡한 state를 관리할 수 있게 해준다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;과정
    &lt;ul&gt;
      &lt;li&gt;Server에서 client에게 response를 줄 때, Cookie를 헤더에 포함해서 준다. 이때 Server db에 Cookie를 저장한다.&lt;/li&gt;
      &lt;li&gt;Client는 헤더에서 Cookie를 추출해서 저장하고 다음 Request 부터 헤더에 Cookie를 포함해서 보낸다.&lt;/li&gt;
      &lt;li&gt;Server는 Request의 Cookie를 확인하고 어떤 Client의 요청인지 식별할 수 있다. (state)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;web-caching&quot;&gt;Web Caching&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;proxy server(Web cache)
    &lt;ul&gt;
      &lt;li&gt;web server를 대신해서 http response msg를 전달한다.&lt;/li&gt;
      &lt;li&gt;자신의 disk에 최근 request 받은 object를 복제해서 저장한다.&lt;/li&gt;
      &lt;li&gt;Server이면서 동시에 Client이다.
        &lt;ul&gt;
          &lt;li&gt;복제본이 없으면 proxy server는 원래 server로 요청을 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;특징
    &lt;ul&gt;
      &lt;li&gt;일반적으로 ISP에 설치된다.&lt;/li&gt;
      &lt;li&gt;직접 server에 요청하는 것보다 시간이 적게 걸린다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;smtp-protocol&quot;&gt;SMTP Protocol&lt;/h2&gt;

&lt;h3 id=&quot;특징-1&quot;&gt;특징&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Mail server간 mail을 주고받기 위한 protocol 이다.&lt;/li&gt;
  &lt;li&gt;Mail server는 SMTP를 통해 TCP 연결을 하고 상대방 mail server에게 직접적으로 Mail을 전송한다.
    &lt;ul&gt;
      &lt;li&gt;TCP port는 25 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;과정&quot;&gt;과정&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;User agent → Client Mail server → Server Mail server → User agent2&lt;/li&gt;
  &lt;li&gt;여기서 서버는 Client, Server 둘 다 될 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dns&quot;&gt;DNS&lt;/h2&gt;

&lt;h3 id=&quot;특징-2&quot;&gt;특징&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;host name과 Internet 상에서의 숫자 상의 주소(IP address)를 mapping 해주는 시스템이다.
    &lt;ul&gt;
      &lt;li&gt;host name : 알파벳 기반의 Internet host 주소&lt;/li&gt;
      &lt;li&gt;ex) cs-study.com, network.net, youtube.co.kr&lt;/li&gt;
      &lt;li&gt;국가와 기관, 성격을 유추할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사람에게 더 친숙한 이름으로 Internet 주소를 사용할 수 있게 해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;구조&quot;&gt;구조&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;hostname - IP address에  대한 mapping data를 보관하고 있다.&lt;/li&gt;
  &lt;li&gt;분산구조 형태로 database가 운영된다.
    &lt;ul&gt;
      &lt;li&gt;하나의 DNS server에 모든 mapping data를 가지는 centralized 구조에서는 문제가 많다.
        &lt;ul&gt;
          &lt;li&gt;single point of failure : DNS에 장애가 발생하면 전체 Internet이 다운된다.&lt;/li&gt;
          &lt;li&gt;traffic volume : 모든 host가 DNS에 한 번에 접근하면 서버에 부담이 많이 가게된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;이런 이유들로 DNS는 계층 구조를 가지게 됐다.&lt;/li&gt;
  &lt;li&gt;3 Layer
    &lt;ul&gt;
      &lt;li&gt;Root DNS server : 전 세계 10여개 존재&lt;/li&gt;
      &lt;li&gt;top-level domain DNS server (TLD) : com, org, uk, fr 등 유명한 것들&lt;/li&gt;
      &lt;li&gt;authoritative DNS servers : 실제 IP 주소 회신&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Local DNS Server
    &lt;ul&gt;
      &lt;li&gt;각 기관별로 하나씩 보유하고 있다.&lt;/li&gt;
      &lt;li&gt;최초의 subnet 내에서 접속하는 DNS server이다.&lt;/li&gt;
      &lt;li&gt;우선 여기에 query를 하고 없으면 Root → TLD, Authoritative DNS server를 거쳐서 mapping 정보를 가져온 후 응답한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cdn-contents-distribution-network&quot;&gt;CDN (Contents Distribution Network)&lt;/h2&gt;

&lt;h3 id=&quot;배경&quot;&gt;배경&lt;/h3&gt;

&lt;p&gt;비디오와 같은 스트리밍 서비스가 network load의 주 원인이 되고 있고 네트워크상에서 Client와 Server사이의 거리가 일반적으로 크기 때문에 여러 ISP를 거치는 경우가 많다. 그런데 ISP의 용량이 적으면 bottlenect이 발생한다. 이러한 이유로 일반적으로 스트리밍 서비스는 여러 대의 server를 분산적으로 두고 서비스를 제공한다. 이를 CDN이라고 한다.&lt;/p&gt;

&lt;h3 id=&quot;cdn-구축의-두-가지-원칙&quot;&gt;CDN 구축의 두 가지 원칙&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Enter deep : 각 ISP network 내에 설치
    &lt;ul&gt;
      &lt;li&gt;CDN 서버 사이의 링크 라우터 개수가 줄어들기 때문에 속도가 빠르지만 그만큼 많이 설치해야 하기 때문에 비용이 많이 발생한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bring home : ISP 주변에 전용 회선으로 연결해서 설치
    &lt;ul&gt;
      &lt;li&gt;중요 지점에만 CDN을 설치함으로써 비용을 줄일 수 있다. 하지만 반대로 거리가 늘어나기 때문에 속도는 느려진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Moon JinSu</name></author><category term="Network" /><category term="Layer5" /><category term="Network" /><category term="Layer5" /><summary type="html">application layer의 특징</summary></entry><entry><title type="html">[SQLD] 데이터 모델 &amp;amp; 성능</title><link href="http://localhost:4000/sqld/35/" rel="alternate" type="text/html" title="[SQLD] 데이터 모델 &amp;amp; 성능" /><published>2023-09-01T00:00:00+09:00</published><updated>2023-09-01T00:00:00+09:00</updated><id>http://localhost:4000/sqld/35</id><content type="html" xml:base="http://localhost:4000/sqld/35/">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;데이터-모델과-성능&quot;&gt;&lt;em&gt;데이터 모델과 성능&lt;/em&gt;&lt;/h1&gt;

&lt;h2 id=&quot;이상현상&quot;&gt;이상현상&lt;br /&gt;&lt;/h2&gt;

&lt;p&gt;정규화를 살펴보기 전에 &lt;strong&gt;이상현상(Anomaly)&lt;/strong&gt;에 대해서 알아보자&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;삽입 이상
    &lt;ul&gt;
      &lt;li&gt;불필요한 데이터를 추가해야지만, 삽입이 가능한 상황&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;갱신 이상
    &lt;ul&gt;
      &lt;li&gt;일부만 변경하여, 데이터가 불일치 하는 모순이 발생하는 상황&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;삭제 이상
    &lt;ul&gt;
      &lt;li&gt;튜플 삭제로 인해 꼭 필요한 데이터까지 함께 삭제되는 상황&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정규화&quot;&gt;정규화&lt;br /&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;데이터의 일관성&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;최소한의 중복&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;최대한의 데이터 유연성&lt;/code&gt;을 위한 방법으로, &lt;strong&gt;데이터를 분해하는 과정&lt;/strong&gt;을 말한다.&lt;/li&gt;
  &lt;li&gt;데이터 중복을 제거하고 데이터 모델의 독립성을 확보한다.&lt;/li&gt;
  &lt;li&gt;정규화를 하면 비즈니스 변화가 발생해도 &lt;strong&gt;데이터 모델의 변경을 최소화할 수 있다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;1~5 정규화까지 있으며, 제3정규화까지만 수행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정규화-절차-&quot;&gt;정규화 절차 &lt;br /&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/35_1.png&quot; alt=&quot;img1&quot; width=&quot;80%&amp;quot;&amp;quot;, height=&amp;quot;50%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;함수의 종속성이란?&lt;/em&gt; &lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;X, Y가 있을 때, X가 변할 때 Y도 변한다면 Y는 X에 함수적으로 종속된다고 표현한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;X-&amp;gt;Y이면 Y는 X에 함수적으로 종속&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;제1정규화는 함수적 종속성을 근거로 시행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;제1정규화-&quot;&gt;제1정규화 &lt;br /&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/35_2.png&quot; alt=&quot;img2&quot; width=&quot;80%&amp;quot;&amp;quot;, height=&amp;quot;50%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 그림을 보면 테이블 X가 Y의 column들을 함수적으로 종속하고 있다. X의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;계좌번호&lt;/code&gt; 하나로 유일성을 만족하지 못한다고 가정하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;계좌번호&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;회원ID&lt;/code&gt;를 기본키로 설정한 모습이다. 이처럼 기본키를 잡는 것이 제1정규화이다.&lt;/p&gt;

&lt;h2 id=&quot;제2정규화-&quot;&gt;제2정규화 &lt;br /&gt;&lt;/h2&gt;

&lt;p&gt;제2정규화는 부분 함수 종속성을 제거하는 과정이다. 부분 함수 종속성은 기본키가 2개 이상의 column으로 구성되는 경우에만 발생한다. 때문에 기본키가 1개라면 제2정규화는 넘어간다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/35_3.png&quot; alt=&quot;img3&quot; width=&quot;80%&amp;quot;&amp;quot;, height=&amp;quot;50%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 그림에서 기본키의 회원ID가 변경되면 이름이 변경된다. 즉 회원ID가 이름을 함수적으로 종속하고 있다. 이런 경우를 &lt;strong&gt;부분 함수 종속성&lt;/strong&gt;이라고 한다. 부분 함수 종속성이 발생하면 분해를 통해 제거해야 한다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/35_4.png&quot; alt=&quot;img4&quot; width=&quot;80%&amp;quot;&amp;quot;, height=&amp;quot;50%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이처럼 테이블을 하나 도출된다.&lt;/p&gt;

&lt;h2 id=&quot;제3정규화-&quot;&gt;제3정규화 &lt;br /&gt;&lt;/h2&gt;

&lt;p&gt;제3정규화는 &lt;strong&gt;이행 함수 종속성&lt;/strong&gt;을 제거하는 과정이다. 이행 함수 종속성이란 기본키를 제외한 칼럼간의 종속성이 발생하는 것을 말한다. 제3정규화는 제1, 제2 정규화를 마치고 수행한다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/35_5.png&quot; alt=&quot;img5&quot; width=&quot;80%&amp;quot;&amp;quot;, height=&amp;quot;50%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;관리점 코드가 바뀌면 관리점이 바뀐다. 다시 말해서 관리점이 관리점 코드에 함수적으로 종속된다. 때문에 관리점 테이블이 도출되고 관리점 코드가 기본키가 된다.&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;정규화와-성능&quot;&gt;정규화와 성능&lt;br /&gt;&lt;/h2&gt;

&lt;p&gt;정규화를 수행하는 것이 항상 좋지는 않다.&lt;br /&gt;
정규화를 수행하면 테이블이 분해되고 데이터의 중복이 제거되기 때문에 데이터 모델의 유연성은 높아지지만 데이터를 조회할 때 조인을 유발하기 때문에 CPU와 메모리를 많이 사용하게 된다. &lt;br /&gt;
조인으로 인한 성능 문제는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;반정규화&lt;/code&gt;를 통해서 해결할 수 있다. 하지만 반정규화는 데이터를 중복시키기 때문에 또 다른 문제가 있다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/35_6.png&quot; alt=&quot;img6&quot; width=&quot;20%&amp;quot;&amp;quot;, height=&amp;quot;40%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위 테이블을 보면 칼럼이 계속 증가할 때, 조인이 최소화되기 때문에 조회를 빠르게 할 수 있다. 하지만 column이 많아지면 1개의 행의 크기가 데이터베이스 관리 시스템의 입출력 단위인 블록의 크기를 넘어설 수 있다. 그렇게 되면 1개의 행을 읽을 때 여러 개의 블록을 읽어야 한다.&lt;br /&gt;
이는 디스크 입출력 횟수 증가를 유발하고 성능이 오히려 떨어진다.&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;반정규화&quot;&gt;반정규화&lt;br /&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스 성능 향상을 위해 데이터 중복을 허용하고 조인을 줄이는 데이터베이스 성능 향상 방법&lt;/li&gt;
  &lt;li&gt;조인을 줄여서 조회 성능이 좋아지지만, 데이터 모델의 유연성은 떨어진다.&lt;/li&gt;
  &lt;li&gt;반정규화를 수행하는 경우는?
    &lt;ul&gt;
      &lt;li&gt;다량의 범위를 자주 처리할 때&lt;/li&gt;
      &lt;li&gt;특정 범위의 데이터만 자주 처리하는 경우&lt;/li&gt;
      &lt;li&gt;요약/집계 정보가 자주 요구되는 경우&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;절차&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/35_7.png&quot; alt=&quot;img7&quot; width=&quot;80%&amp;quot;&amp;quot;, height=&amp;quot;50%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;분산-데이터베이스&quot;&gt;분산 데이터베이스&lt;br /&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;중앙 집중형 데이터베이스 : 데이터베이스 시스템 구축 시, 1대의 물리적 시스템에 데이터베이스 관리 시스템을 설치하고 여러 명의 사용자가 데이터베이스 관리 시스템에 접속하여 데이터베이스를 사용하는 구조&lt;/li&gt;
  &lt;li&gt;분산 데이터베이스 : 물리적으로 떨어진 데이터베이스를 네트워크로 연결하여 단일 데이터베이스 이미지를 보여주고, 분산된 작업 처리를 수행하는 데이터베이스&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;분산-데이터베이스의-투명성-종류-&quot;&gt;분산 데이터베이스의 투명성 종류 &lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/35_8.png&quot; alt=&quot;img8&quot; width=&quot;80%&amp;quot;&amp;quot;, height=&amp;quot;50%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;분산-데이터베이스-장단점-&quot;&gt;분산 데이터베이스 장단점 &lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/35_9.png&quot; alt=&quot;img9&quot; width=&quot;80%&amp;quot;&amp;quot;, height=&amp;quot;50%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>Moon JinSu</name></author><category term="SQLD" /><category term="데이터베이스" /><category term="SQLD" /><summary type="html"></summary></entry><entry><title type="html">[SQLD] 데이터 모델링</title><link href="http://localhost:4000/sqld/34/" rel="alternate" type="text/html" title="[SQLD] 데이터 모델링" /><published>2023-08-29T00:00:00+09:00</published><updated>2023-08-29T00:00:00+09:00</updated><id>http://localhost:4000/sqld/34</id><content type="html" xml:base="http://localhost:4000/sqld/34/">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;데이터-모델링&quot;&gt;&lt;em&gt;데이터 모델링&lt;/em&gt;&lt;/h1&gt;

&lt;h2 id=&quot;데이터-모델링의-단계&quot;&gt;데이터 모델링의 단계&lt;/h2&gt;

&lt;p&gt;개념적 모델링 &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;고객의 비지니스 프로세스를 분석하고 업무 전체에 대해서 데이터 모델링을 수행&lt;/li&gt;
  &lt;li&gt;복잡하게 표현하지 않고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;중요한 부분을 위주&lt;/code&gt;로 모델링하는 단계&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;업무적 관점&lt;/code&gt;에서 모델링하며, 기술적 용어는 가급적 사용 X&lt;/li&gt;
  &lt;li&gt;엔티티와 속성을 도출하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;개념적 ERD&lt;/code&gt;를 작성한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;논리적 모델링 &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;개념적 모델링을 논리적 모델링으로 변환하는 과정&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;식별자를 도출&lt;/code&gt;하고 필요한 모든 릴레이션을 정의한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;정규화를 수행&lt;/code&gt;해서 데이터 모델의 독립성을 확보한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;물리적 모델링 &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;데이터베이스를 실제 구축한다.
    &lt;ul&gt;
      &lt;li&gt;테이블, 인덱스, 함수 등을 생성한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;성능, 보안, 가용성을 고려하여 구축한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/33_1.png&quot; alt=&quot;img1&quot; width=&quot;80%&amp;quot;&amp;quot;, height=&amp;quot;50%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;erd-entity-relationship-diagram&quot;&gt;ERD (Entity Relationship Diagram)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;1976년 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;피터첸&lt;/code&gt;이 ERD 표기법을 만들었고, &lt;strong&gt;사실상 데이터 모델링의 표준&lt;/strong&gt;으로 사용되고 있음.&lt;/li&gt;
  &lt;li&gt;엔티티 간의 관계를 정의하는 모델링 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;작성 절차&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;엔티티를 도출하고 그린다.&lt;/li&gt;
  &lt;li&gt;엔티티를 배치한다.
    &lt;ul&gt;
      &lt;li&gt;엔티티를 도출한 후 엔티티를 베치한다.&lt;/li&gt;
      &lt;li&gt;중요한 엔티티를 왼쪽 상단에 배치 (가시성)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;엔티티 간의 관계를 설정한다.&lt;/li&gt;
  &lt;li&gt;관계명을 서술한다.
    &lt;ul&gt;
      &lt;li&gt;엔티티 간의 어떤 행위나 존재가 있는지 표현&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;관계 참여도를 표현한다.
    &lt;ul&gt;
      &lt;li&gt;관계 참여도 : 1개의 엔티티와 다른 엔티티 간의 참여하는 관계 수&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;관계의 필수 여부를 표현한다.
    &lt;ul&gt;
      &lt;li&gt;필수 : 반드시 존재해야 하는 것.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ERD 작성 시 고려사항&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;중요한 엔티티를 가급적 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;왼쪽 상단에 배치&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;ERD는 이해하기 쉽고 복잡하지 않아야 함.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3중-스키마3-level-schema&quot;&gt;3중 스키마(3-Level Schema)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/33_2.png&quot; alt=&quot;img2&quot; width=&quot;80%&amp;quot;&amp;quot;, height=&amp;quot;50%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;외부 스키마&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;사용자 관점, 업무상 관련이 있는 데이터 접근&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;응용 프로그램이 접근하는 데이터베이스&lt;/strong&gt;를 정의한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;개념 스키마&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;설계자 관점, 사용자 전체 집단의 데이터베이스 구조&lt;/li&gt;
  &lt;li&gt;전체 데이터베이스 내의 규칙과 구조를 표현한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;통합 데이터베이스 구조&lt;/strong&gt;이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;내부 스키마&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;개발자 관점, &lt;strong&gt;데이터베이스의 물리적 저장 구조&lt;/strong&gt;이다.&lt;/li&gt;
  &lt;li&gt;데이터 저장 구조, 레코드 구조, 필드 정의, 인덱스 등을 의미&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;엔티티entity&quot;&gt;엔티티(Entity)&lt;/h2&gt;

&lt;p&gt;엔티티 특징&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;식별자
    &lt;ul&gt;
      &lt;li&gt;엔티티는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;유일한 식별자&lt;/code&gt;가 있어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인스턴스 집합
    &lt;ul&gt;
      &lt;li&gt;2개 이상의 인스턴스를 가져야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;속성
    &lt;ul&gt;
      &lt;li&gt;엔티티는 &lt;strong&gt;반드시 속성&lt;/strong&gt;을 가지고 있어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;관계
    &lt;ul&gt;
      &lt;li&gt;엔티티는 &lt;strong&gt;다른 엔티티와 최소 1개 이상의 관계&lt;/strong&gt;가 있어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;업무
    &lt;ul&gt;
      &lt;li&gt;엔티티는 &lt;strong&gt;업무에서 관리되어야 하는 집합&lt;/strong&gt;이어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;엔티티의 종류&lt;br /&gt;
엔티티의 종류에 대해서는 아래 그림을 참고하자. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;물리적 형태의 존재 여부에 따른 분류&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/33_3.png&quot; alt=&quot;img3&quot; width=&quot;80%&amp;quot;&amp;quot;, height=&amp;quot;50%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;발생 시점에 따른 분류&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/33_4.png&quot; alt=&quot;img4&quot; width=&quot;80%&amp;quot;&amp;quot;, height=&amp;quot;50%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;속성attribute&quot;&gt;속성(Attribute)&lt;/h2&gt;

&lt;p&gt;속성이란?&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;업무에서 필요한 정보인 엔티티가 가지는 항목&lt;/li&gt;
  &lt;li&gt;더 이상 분리되지 않는 단위로, 업무에 필요한 데이터를 저장할 수 있다.&lt;/li&gt;
  &lt;li&gt;인스턴스의 구성요소이고 의미적으로 더 이상 분해되지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;특징&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;속성은 &lt;strong&gt;하나의 값&lt;/strong&gt;만 가진다.&lt;/li&gt;
  &lt;li&gt;주식별자에게 함수적으로 종속된다.
    &lt;ul&gt;
      &lt;li&gt;기본키가 변경되면, 속성의 값도 변경된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;분류&lt;br /&gt;
속성의 분류는 아래 표를 참고하자.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;분해 여부에 따른 속성의 분류&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/33_5.png&quot; alt=&quot;img5&quot; width=&quot;80%&amp;quot;&amp;quot;, height=&amp;quot;50%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;특성에 따른 속성의 분류&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/33_6.png&quot; alt=&quot;img6&quot; width=&quot;80%&amp;quot;&amp;quot;, height=&amp;quot;50%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;도메인이란?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;속성이 가질 수 있는 &lt;strong&gt;값의 범위&lt;/strong&gt;를 의미한다.&lt;/li&gt;
  &lt;li&gt;예를 들어 성별이라는 속성의 도메인은 ‘남자’, ‘여자’ 이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;관계relationship&quot;&gt;관계(Relationship)&lt;/h2&gt;

&lt;p&gt;관계란?&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;엔티티 간의 관련성을 의미를 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;관계의 종류&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;존재 관계
    &lt;ul&gt;
      &lt;li&gt;엔티티 간의 상태를 의미&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;행위 관계
    &lt;ul&gt;
      &lt;li&gt;엔티티 간의 어떤 행위가 있는 것.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;관계 차수&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;두 개의 엔티티 간에 &lt;strong&gt;관계의 참여하는 수&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/33_7.png&quot; alt=&quot;img7&quot; width=&quot;80%&amp;quot;&amp;quot;, height=&amp;quot;50%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;필수적 관계와 선택적 관계&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;필수적 관계는 ‘l’로 표현되고, 선택적 관계는 ‘O’로 표현된다.&lt;/li&gt;
  &lt;li&gt;필수적 관계
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;반드시 하나가 있어야&lt;/strong&gt; 하는 관계&lt;/li&gt;
      &lt;li&gt;고객이 반드시 있어야 계좌를 개설할 수 있음.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;선택적 관계
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;없을 수도 있는&lt;/strong&gt; 관계&lt;/li&gt;
      &lt;li&gt;고객은 있지만, 계좌가 없을 수도 있다면 선택적 관계가 됨.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;식별 관계와 비식별 관계&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;식별 관계
    &lt;ul&gt;
      &lt;li&gt;강한 개체의 기본키를 다른 엔티티의 기본키로 가지는 관계&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;실선&lt;/code&gt;으로 표현한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;비식별 관계
    &lt;ul&gt;
      &lt;li&gt;강한 개체의 기본키를 다른 엔티티의 기본키가 아닌 일반 컬럼으로 관계를 가지는 것.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;점선&lt;/code&gt;으로 표현한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;엔티티-식별자entity-identifier&quot;&gt;엔티티 식별자(Entity Identifier)&lt;/h2&gt;

&lt;p&gt;식별자란?&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;엔티티를 대표할 수 있는 &lt;strong&gt;유일성&lt;/strong&gt;을 만족하는 속성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;주식별자 속성&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;최소성
    &lt;ul&gt;
      &lt;li&gt;주식별자는 최소성을 만족하는 키이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;대표성
    &lt;ul&gt;
      &lt;li&gt;주식별자는 엔티티를 대표할 수 있어야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;유일성
    &lt;ul&gt;
      &lt;li&gt;주식별자는 엔티티의 인스턴스를 유일하게 식별한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;불변성
    &lt;ul&gt;
      &lt;li&gt;주식별자는 자주 변경되지 않아야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;키의 종류&lt;br /&gt;
아래 표를 참고하자 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/33_8.png&quot; alt=&quot;img8&quot; width=&quot;80%&amp;quot;&amp;quot;, height=&amp;quot;50%&amp;quot;&quot; /&gt; &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;식별자의 종류&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;대표성 여부에 따라 주식별자, 보조 식별자로 나뉜다.
    &lt;ul&gt;
      &lt;li&gt;주식별자
        &lt;ul&gt;
          &lt;li&gt;유일성과 최소성을 만족하면서, &lt;strong&gt;엔티티를 대표하는 식별자&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;다른 엔티티의 &lt;strong&gt;참조 관계로 연결&lt;/strong&gt;될 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;보조 식별자
        &lt;ul&gt;
          &lt;li&gt;유일성과 최소성을 만족하지만, &lt;strong&gt;대표성을 만족하지 못하는 식별자&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;생성 여부에 따른 분류
    &lt;ul&gt;
      &lt;li&gt;내부 식별자
        &lt;ul&gt;
          &lt;li&gt;엔티티 &lt;strong&gt;내부에서 스스로 생성&lt;/strong&gt;되는 식별자&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;외부 식별자
        &lt;ul&gt;
          &lt;li&gt;다른 엔티티와의 관계로 인하여 만들어지는 식별자&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;속성의 수에 따른 분류
    &lt;ul&gt;
      &lt;li&gt;단일 식별자
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;하나의 속성&lt;/strong&gt;으로 구성&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;복합 식별자
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;2개 이상&lt;/strong&gt;의 속성으로 구성&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;대체 여부
    &lt;ul&gt;
      &lt;li&gt;본질 식별자
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;비지니스 프로세스&lt;/strong&gt;에서 만들어지는 식별자&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;인조 식별자
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;인위적&lt;/strong&gt;으로 만들어지는 식별자&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;참고-사이트-출처&quot;&gt;&lt;em&gt;참고 사이트 출처&lt;/em&gt;&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;https://starrykss.tistory.com/1612&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Moon JinSu</name></author><category term="SQLD" /><category term="데이터베이스" /><category term="SQLD" /><summary type="html"></summary></entry></feed>